
ultrasonic_smart_lamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bf8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004d98  08004d98  00005d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004df4  08004df4  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004df4  08004df4  00005df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dfc  08004dfc  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dfc  08004dfc  00005dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e00  08004e00  00005e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004e04  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000068  08004e6c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08004e6c  000062dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0df  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021f1  00000000  00000000  00014177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  00016368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a03  00000000  00000000  00017050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175e9  00000000  00000000  00017a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1c4  00000000  00000000  0002f03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fdb9  00000000  00000000  0003e200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cdfb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003de8  00000000  00000000  000cdffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000d1de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004d80 	.word	0x08004d80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004d80 	.word	0x08004d80

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	0000      	movs	r0, r0
	...

08000d50 <HAL_TIM_IC_CaptureCallback>:
uint8_t  is_first_captured 	= 0; 	// 현재 캡처 단계
uint8_t distance 						= 0;	// 계산된 거리 (cm), (센서의 성능상 200cm 이상은 나오지도 않아 1byte로 선택했다)

// 인터럽트 서비스 루틴(ISR)
// Global Interrup Enable 하면 여기에 대응하는 함수를 만들어줘야 한다 (오타가 있어서는 안된다 : stm32f4xx_it.h)
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	// 인터럽트가 발생된 타이머의 채널 확인
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	7f1b      	ldrb	r3, [r3, #28]
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	f040 80a2 	bne.w	8000ea6 <HAL_TIM_IC_CaptureCallback+0x156>
		// 현재 캡처 상승 단계
		if(is_first_captured == 0){ // Rising Edge
 8000d62:	4b55      	ldr	r3, [pc, #340]	@ (8000eb8 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d11a      	bne.n	8000da0 <HAL_TIM_IC_CaptureCallback+0x50>
			// 타이머에서 Rising Edge 에서 캡처된 카운트 값을 저장해준다
			inputCapture_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f002 f915 	bl	8002f9c <HAL_TIM_ReadCapturedValue>
 8000d72:	4603      	mov	r3, r0
 8000d74:	4a51      	ldr	r2, [pc, #324]	@ (8000ebc <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000d76:	6013      	str	r3, [r2, #0]
			// 다음 인터럽트 발생을 위한 설정
			is_first_captured = 1;
 8000d78:	4b4f      	ldr	r3, [pc, #316]	@ (8000eb8 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	701a      	strb	r2, [r3, #0]
			// 타이머가 기본적으로 Rising Edge 에서동작하도록 되어 있기 때문에 Falling Edge 에서 인터럽트가 발생하도록 타이머 설정을 변경한다
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	6a1a      	ldr	r2, [r3, #32]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8000d8c:	621a      	str	r2, [r3, #32]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	6a1a      	ldr	r2, [r3, #32]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f042 0220 	orr.w	r2, r2, #32
 8000d9c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
			htim->Instance->CNT = 0;
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
		}
	}
}
 8000d9e:	e082      	b.n	8000ea6 <HAL_TIM_IC_CaptureCallback+0x156>
		else if(is_first_captured == 1) {// Falling Edge
 8000da0:	4b45      	ldr	r3, [pc, #276]	@ (8000eb8 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d17e      	bne.n	8000ea6 <HAL_TIM_IC_CaptureCallback+0x156>
			inputCapture_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000da8:	2104      	movs	r1, #4
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f002 f8f6 	bl	8002f9c <HAL_TIM_ReadCapturedValue>
 8000db0:	4603      	mov	r3, r0
 8000db2:	4a43      	ldr	r2, [pc, #268]	@ (8000ec0 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000db4:	6013      	str	r3, [r2, #0]
			if(inputCapture_Val2 > inputCapture_Val1) {
 8000db6:	4b42      	ldr	r3, [pc, #264]	@ (8000ec0 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	4b40      	ldr	r3, [pc, #256]	@ (8000ebc <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d907      	bls.n	8000dd2 <HAL_TIM_IC_CaptureCallback+0x82>
				difference = inputCapture_Val2 - inputCapture_Val1;
 8000dc2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ec0 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	4b3d      	ldr	r3, [pc, #244]	@ (8000ebc <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	4a3d      	ldr	r2, [pc, #244]	@ (8000ec4 <HAL_TIM_IC_CaptureCallback+0x174>)
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	e009      	b.n	8000de6 <HAL_TIM_IC_CaptureCallback+0x96>
				difference = 65535 - inputCapture_Val1 + inputCapture_Val2;
 8000dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ec0 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	4b39      	ldr	r3, [pc, #228]	@ (8000ebc <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000de0:	33ff      	adds	r3, #255	@ 0xff
 8000de2:	4a38      	ldr	r2, [pc, #224]	@ (8000ec4 <HAL_TIM_IC_CaptureCallback+0x174>)
 8000de4:	6013      	str	r3, [r2, #0]
			distance = difference * 0.034 / 2;
 8000de6:	4b37      	ldr	r3, [pc, #220]	@ (8000ec4 <HAL_TIM_IC_CaptureCallback+0x174>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fb8a 	bl	8000504 <__aeabi_ui2d>
 8000df0:	a32f      	add	r3, pc, #188	@ (adr r3, 8000eb0 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df6:	f7ff fbff 	bl	80005f8 <__aeabi_dmul>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	4610      	mov	r0, r2
 8000e00:	4619      	mov	r1, r3
 8000e02:	f04f 0200 	mov.w	r2, #0
 8000e06:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e0a:	f7ff fd1f 	bl	800084c <__aeabi_ddiv>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	460b      	mov	r3, r1
 8000e12:	4610      	mov	r0, r2
 8000e14:	4619      	mov	r1, r3
 8000e16:	f7ff fe01 	bl	8000a1c <__aeabi_d2uiz>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ec8 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000e20:	701a      	strb	r2, [r3, #0]
			if(distance >= 5){
 8000e22:	4b29      	ldr	r3, [pc, #164]	@ (8000ec8 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	d915      	bls.n	8000e56 <HAL_TIM_IC_CaptureCallback+0x106>
				gt5 = 1;
 8000e2a:	4b28      	ldr	r3, [pc, #160]	@ (8000ecc <HAL_TIM_IC_CaptureCallback+0x17c>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]
				lt5 = 0;
 8000e30:	4b27      	ldr	r3, [pc, #156]	@ (8000ed0 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
				if(ledTimer10s>=10000){
 8000e36:	4b27      	ldr	r3, [pc, #156]	@ (8000ed4 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	dd14      	ble.n	8000e6c <HAL_TIM_IC_CaptureCallback+0x11c>
					HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2120      	movs	r1, #32
 8000e46:	4824      	ldr	r0, [pc, #144]	@ (8000ed8 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000e48:	f000 ffc4 	bl	8001dd4 <HAL_GPIO_WritePin>
					ledTimer10s = 10000;
 8000e4c:	4b21      	ldr	r3, [pc, #132]	@ (8000ed4 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000e4e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	e00a      	b.n	8000e6c <HAL_TIM_IC_CaptureCallback+0x11c>
				gt5 = 0;
 8000e56:	4b1d      	ldr	r3, [pc, #116]	@ (8000ecc <HAL_TIM_IC_CaptureCallback+0x17c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
				lt5 = 1;
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed0 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2120      	movs	r1, #32
 8000e66:	481c      	ldr	r0, [pc, #112]	@ (8000ed8 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000e68:	f000 ffb4 	bl	8001dd4 <HAL_GPIO_WritePin>
			is_first_captured = 0;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	6a1a      	ldr	r2, [r3, #32]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8000e80:	621a      	str	r2, [r3, #32]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6a12      	ldr	r2, [r2, #32]
 8000e8c:	621a      	str	r2, [r3, #32]
			htim->Instance->CNT = 0;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	@ 0x24
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
 8000e96:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	68da      	ldr	r2, [r3, #12]
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000edc <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 0204 	bic.w	r2, r2, #4
 8000ea4:	60da      	str	r2, [r3, #12]
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	b020c49c 	.word	0xb020c49c
 8000eb4:	3fa16872 	.word	0x3fa16872
 8000eb8:	20000090 	.word	0x20000090
 8000ebc:	20000084 	.word	0x20000084
 8000ec0:	20000088 	.word	0x20000088
 8000ec4:	2000008c 	.word	0x2000008c
 8000ec8:	20000091 	.word	0x20000091
 8000ecc:	20000170 	.word	0x20000170
 8000ed0:	20000174 	.word	0x20000174
 8000ed4:	2000016c 	.word	0x2000016c
 8000ed8:	40020000 	.word	0x40020000
 8000edc:	20000094 	.word	0x20000094

08000ee0 <getDistance>:

/*
 * 100ms 마다 Trigger Pin을 쓰기 핀으로 변경해주고
 */
uint32_t getDistance(){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); 아래와 동일
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2140      	movs	r1, #64	@ 0x40
 8000ee8:	480b      	ldr	r0, [pc, #44]	@ (8000f18 <getDistance+0x38>)
 8000eea:	f000 ff73 	bl	8001dd4 <HAL_GPIO_WritePin>
	delayUS(10);
 8000eee:	200a      	movs	r0, #10
 8000ef0:	f000 f83e 	bl	8000f70 <delayUS>
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2140      	movs	r1, #64	@ 0x40
 8000ef8:	4807      	ldr	r0, [pc, #28]	@ (8000f18 <getDistance+0x38>)
 8000efa:	f000 ff6b 	bl	8001dd4 <HAL_GPIO_WritePin>

	// 인터럽트 설정
	__HAL_TIM_ENABLE_IT(&htim3,TIM_IT_CC2);
 8000efe:	4b07      	ldr	r3, [pc, #28]	@ (8000f1c <getDistance+0x3c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	4b05      	ldr	r3, [pc, #20]	@ (8000f1c <getDistance+0x3c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f042 0204 	orr.w	r2, r2, #4
 8000f0c:	60da      	str	r2, [r3, #12]

	return distance;
 8000f0e:	4b04      	ldr	r3, [pc, #16]	@ (8000f20 <getDistance+0x40>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40020000 	.word	0x40020000
 8000f1c:	20000094 	.word	0x20000094
 8000f20:	20000091 	.word	0x20000091

08000f24 <setTrigger>:

/*
 * @brief generation pulse (100m period 10us duty)
 */
void setTrigger(){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	printf("distance = %ld\n", getDistance());
 8000f28:	f7ff ffda 	bl	8000ee0 <getDistance>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4803      	ldr	r0, [pc, #12]	@ (8000f40 <setTrigger+0x1c>)
 8000f32:	f003 f8b7 	bl	80040a4 <iprintf>
	HAL_Delay(100);
 8000f36:	2064      	movs	r0, #100	@ 0x64
 8000f38:	f000 fc92 	bl	8001860 <HAL_Delay>
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	08004d98 	.word	0x08004d98

08000f44 <app>:

void app(){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0

	// Uart 장치 초기화
	initUart(&huart2);
 8000f48:	4806      	ldr	r0, [pc, #24]	@ (8000f64 <app+0x20>)
 8000f4a:	f000 fbcb 	bl	80016e4 <initUart>

	// Timer3 start (Input Capture)
	// @brief  Starts the TIM Input Capture measurement in interrupt mode.
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000f4e:	2104      	movs	r1, #4
 8000f50:	4805      	ldr	r0, [pc, #20]	@ (8000f68 <app+0x24>)
 8000f52:	f001 fcb5 	bl	80028c0 <HAL_TIM_IC_Start_IT>

	// Timer11 start (Counter)
	// @brief  Starts the TIM Base generation.
	HAL_TIM_Base_Start(&htim11);
 8000f56:	4805      	ldr	r0, [pc, #20]	@ (8000f6c <app+0x28>)
 8000f58:	f001 fbfe 	bl	8002758 <HAL_TIM_Base_Start>

	while(1){

		setTrigger();
 8000f5c:	f7ff ffe2 	bl	8000f24 <setTrigger>
 8000f60:	e7fc      	b.n	8000f5c <app+0x18>
 8000f62:	bf00      	nop
 8000f64:	20000124 	.word	0x20000124
 8000f68:	20000094 	.word	0x20000094
 8000f6c:	200000dc 	.word	0x200000dc

08000f70 <delayUS>:
extern TIM_HandleTypeDef htim3;		// echo 파형의 길이 측정
extern TIM_HandleTypeDef htim11;	// us 지연함수
extern UART_HandleTypeDef huart2;

//16bit Timer
void delayUS(uint16_t us){
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	80fb      	strh	r3, [r7, #6]

	htim11.Instance->CNT = 0;
 8000f7a:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <delayUS+0x30>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	625a      	str	r2, [r3, #36]	@ 0x24

	// Up-Counter 의 값이 us와 같으면 종료
	while(htim11.Instance->CNT < us);
 8000f82:	bf00      	nop
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <delayUS+0x30>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d3f9      	bcc.n	8000f84 <delayUS+0x14>



}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	200000dc 	.word	0x200000dc

08000fa4 <SystickCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SystickCallback(){
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
	if(gt5==1){
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe0 <SystickCallback+0x3c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d107      	bne.n	8000fc0 <SystickCallback+0x1c>
		lt5 = 0;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <SystickCallback+0x40>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
		ledTimer10s++;
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <SystickCallback+0x44>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe8 <SystickCallback+0x44>)
 8000fbe:	6013      	str	r3, [r2, #0]
	}

	if(lt5==1){
 8000fc0:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <SystickCallback+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d105      	bne.n	8000fd4 <SystickCallback+0x30>
		gt5 = 0;
 8000fc8:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <SystickCallback+0x3c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
		ledTimer10s=0;
 8000fce:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <SystickCallback+0x44>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
	}
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000170 	.word	0x20000170
 8000fe4:	20000174 	.word	0x20000174
 8000fe8:	2000016c 	.word	0x2000016c

08000fec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff0:	f000 fbc4 	bl	800177c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff4:	f000 f80c 	bl	8001010 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff8:	f000 f94a 	bl	8001290 <MX_GPIO_Init>
  MX_TIM11_Init();
 8000ffc:	f000 f8d6 	bl	80011ac <MX_TIM11_Init>
  MX_TIM3_Init();
 8001000:	f000 f864 	bl	80010cc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001004:	f000 f91a 	bl	800123c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  app();
 8001008:	f7ff ff9c 	bl	8000f44 <app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <main+0x20>

08001010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b094      	sub	sp, #80	@ 0x50
 8001014:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001016:	f107 0320 	add.w	r3, r7, #32
 800101a:	2230      	movs	r2, #48	@ 0x30
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f003 f895 	bl	800414e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	4b22      	ldr	r3, [pc, #136]	@ (80010c4 <SystemClock_Config+0xb4>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103c:	4a21      	ldr	r2, [pc, #132]	@ (80010c4 <SystemClock_Config+0xb4>)
 800103e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001042:	6413      	str	r3, [r2, #64]	@ 0x40
 8001044:	4b1f      	ldr	r3, [pc, #124]	@ (80010c4 <SystemClock_Config+0xb4>)
 8001046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001050:	2300      	movs	r3, #0
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <SystemClock_Config+0xb8>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a1b      	ldr	r2, [pc, #108]	@ (80010c8 <SystemClock_Config+0xb8>)
 800105a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	4b19      	ldr	r3, [pc, #100]	@ (80010c8 <SystemClock_Config+0xb8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800106c:	2302      	movs	r3, #2
 800106e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001070:	2301      	movs	r3, #1
 8001072:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001074:	2310      	movs	r3, #16
 8001076:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001078:	2300      	movs	r3, #0
 800107a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107c:	f107 0320 	add.w	r3, r7, #32
 8001080:	4618      	mov	r0, r3
 8001082:	f000 fec1 	bl	8001e08 <HAL_RCC_OscConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800108c:	f000 f942 	bl	8001314 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001090:	230f      	movs	r3, #15
 8001092:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 f924 	bl	80022f8 <HAL_RCC_ClockConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010b6:	f000 f92d 	bl	8001314 <Error_Handler>
  }
}
 80010ba:	bf00      	nop
 80010bc:	3750      	adds	r7, #80	@ 0x50
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40007000 	.word	0x40007000

080010cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	@ 0x28
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d2:	f107 0318 	add.w	r3, r7, #24
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010ea:	463b      	mov	r3, r7
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010f6:	4b2b      	ldr	r3, [pc, #172]	@ (80011a4 <MX_TIM3_Init+0xd8>)
 80010f8:	4a2b      	ldr	r2, [pc, #172]	@ (80011a8 <MX_TIM3_Init+0xdc>)
 80010fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 80010fc:	4b29      	ldr	r3, [pc, #164]	@ (80011a4 <MX_TIM3_Init+0xd8>)
 80010fe:	220f      	movs	r2, #15
 8001100:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001102:	4b28      	ldr	r3, [pc, #160]	@ (80011a4 <MX_TIM3_Init+0xd8>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001108:	4b26      	ldr	r3, [pc, #152]	@ (80011a4 <MX_TIM3_Init+0xd8>)
 800110a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800110e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001110:	4b24      	ldr	r3, [pc, #144]	@ (80011a4 <MX_TIM3_Init+0xd8>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001116:	4b23      	ldr	r3, [pc, #140]	@ (80011a4 <MX_TIM3_Init+0xd8>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800111c:	4821      	ldr	r0, [pc, #132]	@ (80011a4 <MX_TIM3_Init+0xd8>)
 800111e:	f001 facb 	bl	80026b8 <HAL_TIM_Base_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001128:	f000 f8f4 	bl	8001314 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800112c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001130:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001132:	f107 0318 	add.w	r3, r7, #24
 8001136:	4619      	mov	r1, r3
 8001138:	481a      	ldr	r0, [pc, #104]	@ (80011a4 <MX_TIM3_Init+0xd8>)
 800113a:	f001 fe67 	bl	8002e0c <HAL_TIM_ConfigClockSource>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001144:	f000 f8e6 	bl	8001314 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001148:	4816      	ldr	r0, [pc, #88]	@ (80011a4 <MX_TIM3_Init+0xd8>)
 800114a:	f001 fb5f 	bl	800280c <HAL_TIM_IC_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001154:	f000 f8de 	bl	8001314 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4619      	mov	r1, r3
 8001166:	480f      	ldr	r0, [pc, #60]	@ (80011a4 <MX_TIM3_Init+0xd8>)
 8001168:	f002 f9ee 	bl	8003548 <HAL_TIMEx_MasterConfigSynchronization>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001172:	f000 f8cf 	bl	8001314 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800117a:	2301      	movs	r3, #1
 800117c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001186:	463b      	mov	r3, r7
 8001188:	2204      	movs	r2, #4
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	@ (80011a4 <MX_TIM3_Init+0xd8>)
 800118e:	f001 fda1 	bl	8002cd4 <HAL_TIM_IC_ConfigChannel>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001198:	f000 f8bc 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	3728      	adds	r7, #40	@ 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000094 	.word	0x20000094
 80011a8:	40000400 	.word	0x40000400

080011ac <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80011b2:	463b      	mov	r3, r7
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80011be:	4b1d      	ldr	r3, [pc, #116]	@ (8001234 <MX_TIM11_Init+0x88>)
 80011c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001238 <MX_TIM11_Init+0x8c>)
 80011c2:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <MX_TIM11_Init+0x88>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001234 <MX_TIM11_Init+0x88>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80011d0:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <MX_TIM11_Init+0x88>)
 80011d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011d6:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d8:	4b16      	ldr	r3, [pc, #88]	@ (8001234 <MX_TIM11_Init+0x88>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011de:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <MX_TIM11_Init+0x88>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80011e4:	4813      	ldr	r0, [pc, #76]	@ (8001234 <MX_TIM11_Init+0x88>)
 80011e6:	f001 fa67 	bl	80026b8 <HAL_TIM_Base_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM11_Init+0x48>
  {
    Error_Handler();
 80011f0:	f000 f890 	bl	8001314 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 80011f4:	480f      	ldr	r0, [pc, #60]	@ (8001234 <MX_TIM11_Init+0x88>)
 80011f6:	f001 fb09 	bl	800280c <HAL_TIM_IC_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM11_Init+0x58>
  {
    Error_Handler();
 8001200:	f000 f888 	bl	8001314 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001204:	2300      	movs	r3, #0
 8001206:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001208:	2301      	movs	r3, #1
 800120a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	2200      	movs	r2, #0
 8001218:	4619      	mov	r1, r3
 800121a:	4806      	ldr	r0, [pc, #24]	@ (8001234 <MX_TIM11_Init+0x88>)
 800121c:	f001 fd5a 	bl	8002cd4 <HAL_TIM_IC_ConfigChannel>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM11_Init+0x7e>
  {
    Error_Handler();
 8001226:	f000 f875 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200000dc 	.word	0x200000dc
 8001238:	40014800 	.word	0x40014800

0800123c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001240:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <MX_USART2_UART_Init+0x4c>)
 8001242:	4a12      	ldr	r2, [pc, #72]	@ (800128c <MX_USART2_UART_Init+0x50>)
 8001244:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001246:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <MX_USART2_UART_Init+0x4c>)
 8001248:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800124c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800124e:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <MX_USART2_UART_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001254:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <MX_USART2_UART_Init+0x4c>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800125a:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <MX_USART2_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001260:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <MX_USART2_UART_Init+0x4c>)
 8001262:	220c      	movs	r2, #12
 8001264:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001266:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <MX_USART2_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <MX_USART2_UART_Init+0x4c>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001272:	4805      	ldr	r0, [pc, #20]	@ (8001288 <MX_USART2_UART_Init+0x4c>)
 8001274:	f002 f9ea 	bl	800364c <HAL_UART_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800127e:	f000 f849 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000124 	.word	0x20000124
 800128c:	40004400 	.word	0x40004400

08001290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	4b18      	ldr	r3, [pc, #96]	@ (800130c <MX_GPIO_Init+0x7c>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a17      	ldr	r2, [pc, #92]	@ (800130c <MX_GPIO_Init+0x7c>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <MX_GPIO_Init+0x7c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b11      	ldr	r3, [pc, #68]	@ (800130c <MX_GPIO_Init+0x7c>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	4a10      	ldr	r2, [pc, #64]	@ (800130c <MX_GPIO_Init+0x7c>)
 80012cc:	f043 0302 	orr.w	r3, r3, #2
 80012d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d2:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <MX_GPIO_Init+0x7c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_Pin|Trigger_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2160      	movs	r1, #96	@ 0x60
 80012e2:	480b      	ldr	r0, [pc, #44]	@ (8001310 <MX_GPIO_Init+0x80>)
 80012e4:	f000 fd76 	bl	8001dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Led_Pin Trigger_Pin */
  GPIO_InitStruct.Pin = Led_Pin|Trigger_Pin;
 80012e8:	2360      	movs	r3, #96	@ 0x60
 80012ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ec:	2301      	movs	r3, #1
 80012ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	4619      	mov	r1, r3
 80012fe:	4804      	ldr	r0, [pc, #16]	@ (8001310 <MX_GPIO_Init+0x80>)
 8001300:	f000 fbe4 	bl	8001acc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001304:	bf00      	nop
 8001306:	3720      	adds	r7, #32
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40023800 	.word	0x40023800
 8001310:	40020000 	.word	0x40020000

08001314 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001318:	b672      	cpsid	i
}
 800131a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <Error_Handler+0x8>

08001320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	4b10      	ldr	r3, [pc, #64]	@ (800136c <HAL_MspInit+0x4c>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132e:	4a0f      	ldr	r2, [pc, #60]	@ (800136c <HAL_MspInit+0x4c>)
 8001330:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001334:	6453      	str	r3, [r2, #68]	@ 0x44
 8001336:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <HAL_MspInit+0x4c>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	4b09      	ldr	r3, [pc, #36]	@ (800136c <HAL_MspInit+0x4c>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	4a08      	ldr	r2, [pc, #32]	@ (800136c <HAL_MspInit+0x4c>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001350:	6413      	str	r3, [r2, #64]	@ 0x40
 8001352:	4b06      	ldr	r3, [pc, #24]	@ (800136c <HAL_MspInit+0x4c>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800

08001370 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08c      	sub	sp, #48	@ 0x30
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a36      	ldr	r2, [pc, #216]	@ (8001468 <HAL_TIM_Base_MspInit+0xf8>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d134      	bne.n	80013fc <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	61bb      	str	r3, [r7, #24]
 8001396:	4b35      	ldr	r3, [pc, #212]	@ (800146c <HAL_TIM_Base_MspInit+0xfc>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139a:	4a34      	ldr	r2, [pc, #208]	@ (800146c <HAL_TIM_Base_MspInit+0xfc>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a2:	4b32      	ldr	r3, [pc, #200]	@ (800146c <HAL_TIM_Base_MspInit+0xfc>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	61bb      	str	r3, [r7, #24]
 80013ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	4b2e      	ldr	r3, [pc, #184]	@ (800146c <HAL_TIM_Base_MspInit+0xfc>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a2d      	ldr	r2, [pc, #180]	@ (800146c <HAL_TIM_Base_MspInit+0xfc>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b2b      	ldr	r3, [pc, #172]	@ (800146c <HAL_TIM_Base_MspInit+0xfc>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 80013ca:	2380      	movs	r3, #128	@ 0x80
 80013cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013da:	2302      	movs	r3, #2
 80013dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	4619      	mov	r1, r3
 80013e4:	4822      	ldr	r0, [pc, #136]	@ (8001470 <HAL_TIM_Base_MspInit+0x100>)
 80013e6:	f000 fb71 	bl	8001acc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	201d      	movs	r0, #29
 80013f0:	f000 fb35 	bl	8001a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013f4:	201d      	movs	r0, #29
 80013f6:	f000 fb4e 	bl	8001a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80013fa:	e031      	b.n	8001460 <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM11)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a1c      	ldr	r2, [pc, #112]	@ (8001474 <HAL_TIM_Base_MspInit+0x104>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d12c      	bne.n	8001460 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	4b18      	ldr	r3, [pc, #96]	@ (800146c <HAL_TIM_Base_MspInit+0xfc>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140e:	4a17      	ldr	r2, [pc, #92]	@ (800146c <HAL_TIM_Base_MspInit+0xfc>)
 8001410:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001414:	6453      	str	r3, [r2, #68]	@ 0x44
 8001416:	4b15      	ldr	r3, [pc, #84]	@ (800146c <HAL_TIM_Base_MspInit+0xfc>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b11      	ldr	r3, [pc, #68]	@ (800146c <HAL_TIM_Base_MspInit+0xfc>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	4a10      	ldr	r2, [pc, #64]	@ (800146c <HAL_TIM_Base_MspInit+0xfc>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	6313      	str	r3, [r2, #48]	@ 0x30
 8001432:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <HAL_TIM_Base_MspInit+0xfc>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800143e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001450:	2303      	movs	r3, #3
 8001452:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4619      	mov	r1, r3
 800145a:	4807      	ldr	r0, [pc, #28]	@ (8001478 <HAL_TIM_Base_MspInit+0x108>)
 800145c:	f000 fb36 	bl	8001acc <HAL_GPIO_Init>
}
 8001460:	bf00      	nop
 8001462:	3730      	adds	r7, #48	@ 0x30
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40000400 	.word	0x40000400
 800146c:	40023800 	.word	0x40023800
 8001470:	40020000 	.word	0x40020000
 8001474:	40014800 	.word	0x40014800
 8001478:	40020400 	.word	0x40020400

0800147c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	@ 0x28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a19      	ldr	r2, [pc, #100]	@ (8001500 <HAL_UART_MspInit+0x84>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d12b      	bne.n	80014f6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	4b18      	ldr	r3, [pc, #96]	@ (8001504 <HAL_UART_MspInit+0x88>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	4a17      	ldr	r2, [pc, #92]	@ (8001504 <HAL_UART_MspInit+0x88>)
 80014a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ae:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <HAL_UART_MspInit+0x88>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <HAL_UART_MspInit+0x88>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a10      	ldr	r2, [pc, #64]	@ (8001504 <HAL_UART_MspInit+0x88>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <HAL_UART_MspInit+0x88>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014d6:	230c      	movs	r3, #12
 80014d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014e6:	2307      	movs	r3, #7
 80014e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4619      	mov	r1, r3
 80014f0:	4805      	ldr	r0, [pc, #20]	@ (8001508 <HAL_UART_MspInit+0x8c>)
 80014f2:	f000 faeb 	bl	8001acc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80014f6:	bf00      	nop
 80014f8:	3728      	adds	r7, #40	@ 0x28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40004400 	.word	0x40004400
 8001504:	40023800 	.word	0x40023800
 8001508:	40020000 	.word	0x40020000

0800150c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <NMI_Handler+0x4>

08001514 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <HardFault_Handler+0x4>

0800151c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <MemManage_Handler+0x4>

08001524 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <BusFault_Handler+0x4>

0800152c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <UsageFault_Handler+0x4>

08001534 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001562:	f000 f95d 	bl	8001820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SystickCallback();
 8001566:	f7ff fd1d 	bl	8000fa4 <SystickCallback>
  /* USER CODE END SysTick_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001574:	4802      	ldr	r0, [pc, #8]	@ (8001580 <TIM3_IRQHandler+0x10>)
 8001576:	f001 fabd 	bl	8002af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000094 	.word	0x20000094

08001584 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	e00a      	b.n	80015ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001596:	f3af 8000 	nop.w
 800159a:	4601      	mov	r1, r0
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	60ba      	str	r2, [r7, #8]
 80015a2:	b2ca      	uxtb	r2, r1
 80015a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	3301      	adds	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	dbf0      	blt.n	8001596 <_read+0x12>
  }

  return len;
 80015b4:	687b      	ldr	r3, [r7, #4]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <_close>:
  }
  return len;
}

int _close(int file)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015e6:	605a      	str	r2, [r3, #4]
  return 0;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <_isatty>:

int _isatty(int file)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015fe:	2301      	movs	r3, #1
}
 8001600:	4618      	mov	r0, r3
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001630:	4a14      	ldr	r2, [pc, #80]	@ (8001684 <_sbrk+0x5c>)
 8001632:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <_sbrk+0x60>)
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800163c:	4b13      	ldr	r3, [pc, #76]	@ (800168c <_sbrk+0x64>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001644:	4b11      	ldr	r3, [pc, #68]	@ (800168c <_sbrk+0x64>)
 8001646:	4a12      	ldr	r2, [pc, #72]	@ (8001690 <_sbrk+0x68>)
 8001648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164a:	4b10      	ldr	r3, [pc, #64]	@ (800168c <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	429a      	cmp	r2, r3
 8001656:	d207      	bcs.n	8001668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001658:	f002 fdc8 	bl	80041ec <__errno>
 800165c:	4603      	mov	r3, r0
 800165e:	220c      	movs	r2, #12
 8001660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001662:	f04f 33ff 	mov.w	r3, #4294967295
 8001666:	e009      	b.n	800167c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001668:	4b08      	ldr	r3, [pc, #32]	@ (800168c <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800166e:	4b07      	ldr	r3, [pc, #28]	@ (800168c <_sbrk+0x64>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	4a05      	ldr	r2, [pc, #20]	@ (800168c <_sbrk+0x64>)
 8001678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167a:	68fb      	ldr	r3, [r7, #12]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20020000 	.word	0x20020000
 8001688:	00000400 	.word	0x00000400
 800168c:	20000178 	.word	0x20000178
 8001690:	200002e0 	.word	0x200002e0

08001694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001698:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <SystemInit+0x20>)
 800169a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800169e:	4a05      	ldr	r2, [pc, #20]	@ (80016b4 <SystemInit+0x20>)
 80016a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <_write>:
#define rxBufferMax 255
int rxBufferWrite;							// write receivebuffer pointer
int rxBufferRead;								// read receivebuffer pointer
uint8_t rxBuffer[rxBufferMax];	// receivebuffer

int _write(int file, char* p, int len){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(myHuart, (uint8_t*)p, len, 10);
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <_write+0x28>)
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	230a      	movs	r3, #10
 80016ce:	68b9      	ldr	r1, [r7, #8]
 80016d0:	f002 f80c 	bl	80036ec <HAL_UART_Transmit>
	return len;
 80016d4:	687b      	ldr	r3, [r7, #4]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	2000017c 	.word	0x2000017c

080016e4 <initUart>:


//initialize uart device
void initUart(UART_HandleTypeDef* inHuart){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	//initialize uart device name
	myHuart = inHuart;
 80016ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001718 <initUart+0x34>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]

	//receive interrupt setting
	HAL_UART_Receive_IT(myHuart, &rxChar, 1);
 80016f2:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <initUart+0x34>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2201      	movs	r2, #1
 80016f8:	4908      	ldr	r1, [pc, #32]	@ (800171c <initUart+0x38>)
 80016fa:	4618      	mov	r0, r3
 80016fc:	f002 f881 	bl	8003802 <HAL_UART_Receive_IT>
	rxBufferRead = rxBufferWrite = 0;
 8001700:	4b07      	ldr	r3, [pc, #28]	@ (8001720 <initUart+0x3c>)
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <initUart+0x3c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a06      	ldr	r2, [pc, #24]	@ (8001724 <initUart+0x40>)
 800170c:	6013      	str	r3, [r2, #0]
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	2000017c 	.word	0x2000017c
 800171c:	20000180 	.word	0x20000180
 8001720:	20000184 	.word	0x20000184
 8001724:	20000188 	.word	0x20000188

08001728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001728:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001760 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800172c:	f7ff ffb2 	bl	8001694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001730:	480c      	ldr	r0, [pc, #48]	@ (8001764 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001732:	490d      	ldr	r1, [pc, #52]	@ (8001768 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001734:	4a0d      	ldr	r2, [pc, #52]	@ (800176c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001738:	e002      	b.n	8001740 <LoopCopyDataInit>

0800173a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800173c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173e:	3304      	adds	r3, #4

08001740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001744:	d3f9      	bcc.n	800173a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001746:	4a0a      	ldr	r2, [pc, #40]	@ (8001770 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001748:	4c0a      	ldr	r4, [pc, #40]	@ (8001774 <LoopFillZerobss+0x22>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800174c:	e001      	b.n	8001752 <LoopFillZerobss>

0800174e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001750:	3204      	adds	r2, #4

08001752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001754:	d3fb      	bcc.n	800174e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001756:	f002 fd4f 	bl	80041f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800175a:	f7ff fc47 	bl	8000fec <main>
  bx  lr    
 800175e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001760:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001768:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800176c:	08004e04 	.word	0x08004e04
  ldr r2, =_sbss
 8001770:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001774:	200002dc 	.word	0x200002dc

08001778 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001778:	e7fe      	b.n	8001778 <ADC_IRQHandler>
	...

0800177c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001780:	4b0e      	ldr	r3, [pc, #56]	@ (80017bc <HAL_Init+0x40>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0d      	ldr	r2, [pc, #52]	@ (80017bc <HAL_Init+0x40>)
 8001786:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800178a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800178c:	4b0b      	ldr	r3, [pc, #44]	@ (80017bc <HAL_Init+0x40>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0a      	ldr	r2, [pc, #40]	@ (80017bc <HAL_Init+0x40>)
 8001792:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001796:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001798:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <HAL_Init+0x40>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a07      	ldr	r2, [pc, #28]	@ (80017bc <HAL_Init+0x40>)
 800179e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a4:	2003      	movs	r0, #3
 80017a6:	f000 f94f 	bl	8001a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017aa:	200f      	movs	r0, #15
 80017ac:	f000 f808 	bl	80017c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b0:	f7ff fdb6 	bl	8001320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023c00 	.word	0x40023c00

080017c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c8:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <HAL_InitTick+0x54>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <HAL_InitTick+0x58>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017da:	fbb2 f3f3 	udiv	r3, r2, r3
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 f967 	bl	8001ab2 <HAL_SYSTICK_Config>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00e      	b.n	800180c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b0f      	cmp	r3, #15
 80017f2:	d80a      	bhi.n	800180a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f4:	2200      	movs	r2, #0
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	f000 f92f 	bl	8001a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001800:	4a06      	ldr	r2, [pc, #24]	@ (800181c <HAL_InitTick+0x5c>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	e000      	b.n	800180c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000000 	.word	0x20000000
 8001818:	20000008 	.word	0x20000008
 800181c:	20000004 	.word	0x20000004

08001820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001824:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <HAL_IncTick+0x20>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <HAL_IncTick+0x24>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4413      	add	r3, r2
 8001830:	4a04      	ldr	r2, [pc, #16]	@ (8001844 <HAL_IncTick+0x24>)
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20000008 	.word	0x20000008
 8001844:	2000018c 	.word	0x2000018c

08001848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return uwTick;
 800184c:	4b03      	ldr	r3, [pc, #12]	@ (800185c <HAL_GetTick+0x14>)
 800184e:	681b      	ldr	r3, [r3, #0]
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	2000018c 	.word	0x2000018c

08001860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001868:	f7ff ffee 	bl	8001848 <HAL_GetTick>
 800186c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001878:	d005      	beq.n	8001886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187a:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <HAL_Delay+0x44>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001886:	bf00      	nop
 8001888:	f7ff ffde 	bl	8001848 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	429a      	cmp	r2, r3
 8001896:	d8f7      	bhi.n	8001888 <HAL_Delay+0x28>
  {
  }
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000008 	.word	0x20000008

080018a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b8:	4b0c      	ldr	r3, [pc, #48]	@ (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018c4:	4013      	ands	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018da:	4a04      	ldr	r2, [pc, #16]	@ (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	60d3      	str	r3, [r2, #12]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f4:	4b04      	ldr	r3, [pc, #16]	@ (8001908 <__NVIC_GetPriorityGrouping+0x18>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	f003 0307 	and.w	r3, r3, #7
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	2b00      	cmp	r3, #0
 800191c:	db0b      	blt.n	8001936 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	f003 021f 	and.w	r2, r3, #31
 8001924:	4907      	ldr	r1, [pc, #28]	@ (8001944 <__NVIC_EnableIRQ+0x38>)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	095b      	lsrs	r3, r3, #5
 800192c:	2001      	movs	r0, #1
 800192e:	fa00 f202 	lsl.w	r2, r0, r2
 8001932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000e100 	.word	0xe000e100

08001948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	2b00      	cmp	r3, #0
 800195a:	db0a      	blt.n	8001972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	490c      	ldr	r1, [pc, #48]	@ (8001994 <__NVIC_SetPriority+0x4c>)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	0112      	lsls	r2, r2, #4
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	440b      	add	r3, r1
 800196c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001970:	e00a      	b.n	8001988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4908      	ldr	r1, [pc, #32]	@ (8001998 <__NVIC_SetPriority+0x50>)
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	3b04      	subs	r3, #4
 8001980:	0112      	lsls	r2, r2, #4
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	440b      	add	r3, r1
 8001986:	761a      	strb	r2, [r3, #24]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000e100 	.word	0xe000e100
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	@ 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f1c3 0307 	rsb	r3, r3, #7
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	bf28      	it	cs
 80019ba:	2304      	movcs	r3, #4
 80019bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3304      	adds	r3, #4
 80019c2:	2b06      	cmp	r3, #6
 80019c4:	d902      	bls.n	80019cc <NVIC_EncodePriority+0x30>
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3b03      	subs	r3, #3
 80019ca:	e000      	b.n	80019ce <NVIC_EncodePriority+0x32>
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	f04f 32ff 	mov.w	r2, #4294967295
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43da      	mvns	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	401a      	ands	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e4:	f04f 31ff 	mov.w	r1, #4294967295
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	43d9      	mvns	r1, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	4313      	orrs	r3, r2
         );
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3724      	adds	r7, #36	@ 0x24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a14:	d301      	bcc.n	8001a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00f      	b.n	8001a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a44 <SysTick_Config+0x40>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a22:	210f      	movs	r1, #15
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f7ff ff8e 	bl	8001948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a2c:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <SysTick_Config+0x40>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a32:	4b04      	ldr	r3, [pc, #16]	@ (8001a44 <SysTick_Config+0x40>)
 8001a34:	2207      	movs	r2, #7
 8001a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	e000e010 	.word	0xe000e010

08001a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ff29 	bl	80018a8 <__NVIC_SetPriorityGrouping>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a70:	f7ff ff3e 	bl	80018f0 <__NVIC_GetPriorityGrouping>
 8001a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	6978      	ldr	r0, [r7, #20]
 8001a7c:	f7ff ff8e 	bl	800199c <NVIC_EncodePriority>
 8001a80:	4602      	mov	r2, r0
 8001a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff5d 	bl	8001948 <__NVIC_SetPriority>
}
 8001a8e:	bf00      	nop
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff31 	bl	800190c <__NVIC_EnableIRQ>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ffa2 	bl	8001a04 <SysTick_Config>
 8001ac0:	4603      	mov	r3, r0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b089      	sub	sp, #36	@ 0x24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
 8001ae6:	e159      	b.n	8001d9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ae8:	2201      	movs	r2, #1
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	f040 8148 	bne.w	8001d96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d005      	beq.n	8001b1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d130      	bne.n	8001b80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	2203      	movs	r2, #3
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4013      	ands	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b54:	2201      	movs	r2, #1
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	091b      	lsrs	r3, r3, #4
 8001b6a:	f003 0201 	and.w	r2, r3, #1
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d017      	beq.n	8001bbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	2203      	movs	r2, #3
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d123      	bne.n	8001c10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	08da      	lsrs	r2, r3, #3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3208      	adds	r2, #8
 8001bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	220f      	movs	r2, #15
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	691a      	ldr	r2, [r3, #16]
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	08da      	lsrs	r2, r3, #3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3208      	adds	r2, #8
 8001c0a:	69b9      	ldr	r1, [r7, #24]
 8001c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0203 	and.w	r2, r3, #3
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 80a2 	beq.w	8001d96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	4b57      	ldr	r3, [pc, #348]	@ (8001db4 <HAL_GPIO_Init+0x2e8>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5a:	4a56      	ldr	r2, [pc, #344]	@ (8001db4 <HAL_GPIO_Init+0x2e8>)
 8001c5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c62:	4b54      	ldr	r3, [pc, #336]	@ (8001db4 <HAL_GPIO_Init+0x2e8>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c6e:	4a52      	ldr	r2, [pc, #328]	@ (8001db8 <HAL_GPIO_Init+0x2ec>)
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	089b      	lsrs	r3, r3, #2
 8001c74:	3302      	adds	r3, #2
 8001c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	220f      	movs	r2, #15
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a49      	ldr	r2, [pc, #292]	@ (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d019      	beq.n	8001cce <HAL_GPIO_Init+0x202>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a48      	ldr	r2, [pc, #288]	@ (8001dc0 <HAL_GPIO_Init+0x2f4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d013      	beq.n	8001cca <HAL_GPIO_Init+0x1fe>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a47      	ldr	r2, [pc, #284]	@ (8001dc4 <HAL_GPIO_Init+0x2f8>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d00d      	beq.n	8001cc6 <HAL_GPIO_Init+0x1fa>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a46      	ldr	r2, [pc, #280]	@ (8001dc8 <HAL_GPIO_Init+0x2fc>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d007      	beq.n	8001cc2 <HAL_GPIO_Init+0x1f6>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a45      	ldr	r2, [pc, #276]	@ (8001dcc <HAL_GPIO_Init+0x300>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d101      	bne.n	8001cbe <HAL_GPIO_Init+0x1f2>
 8001cba:	2304      	movs	r3, #4
 8001cbc:	e008      	b.n	8001cd0 <HAL_GPIO_Init+0x204>
 8001cbe:	2307      	movs	r3, #7
 8001cc0:	e006      	b.n	8001cd0 <HAL_GPIO_Init+0x204>
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e004      	b.n	8001cd0 <HAL_GPIO_Init+0x204>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e002      	b.n	8001cd0 <HAL_GPIO_Init+0x204>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <HAL_GPIO_Init+0x204>
 8001cce:	2300      	movs	r3, #0
 8001cd0:	69fa      	ldr	r2, [r7, #28]
 8001cd2:	f002 0203 	and.w	r2, r2, #3
 8001cd6:	0092      	lsls	r2, r2, #2
 8001cd8:	4093      	lsls	r3, r2
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ce0:	4935      	ldr	r1, [pc, #212]	@ (8001db8 <HAL_GPIO_Init+0x2ec>)
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	089b      	lsrs	r3, r3, #2
 8001ce6:	3302      	adds	r3, #2
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cee:	4b38      	ldr	r3, [pc, #224]	@ (8001dd0 <HAL_GPIO_Init+0x304>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d12:	4a2f      	ldr	r2, [pc, #188]	@ (8001dd0 <HAL_GPIO_Init+0x304>)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d18:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd0 <HAL_GPIO_Init+0x304>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d3c:	4a24      	ldr	r2, [pc, #144]	@ (8001dd0 <HAL_GPIO_Init+0x304>)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d42:	4b23      	ldr	r3, [pc, #140]	@ (8001dd0 <HAL_GPIO_Init+0x304>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d66:	4a1a      	ldr	r2, [pc, #104]	@ (8001dd0 <HAL_GPIO_Init+0x304>)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d6c:	4b18      	ldr	r3, [pc, #96]	@ (8001dd0 <HAL_GPIO_Init+0x304>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d90:	4a0f      	ldr	r2, [pc, #60]	@ (8001dd0 <HAL_GPIO_Init+0x304>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	61fb      	str	r3, [r7, #28]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	2b0f      	cmp	r3, #15
 8001da0:	f67f aea2 	bls.w	8001ae8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001da4:	bf00      	nop
 8001da6:	bf00      	nop
 8001da8:	3724      	adds	r7, #36	@ 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40013800 	.word	0x40013800
 8001dbc:	40020000 	.word	0x40020000
 8001dc0:	40020400 	.word	0x40020400
 8001dc4:	40020800 	.word	0x40020800
 8001dc8:	40020c00 	.word	0x40020c00
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40013c00 	.word	0x40013c00

08001dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	807b      	strh	r3, [r7, #2]
 8001de0:	4613      	mov	r3, r2
 8001de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de4:	787b      	ldrb	r3, [r7, #1]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dea:	887a      	ldrh	r2, [r7, #2]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001df0:	e003      	b.n	8001dfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001df2:	887b      	ldrh	r3, [r7, #2]
 8001df4:	041a      	lsls	r2, r3, #16
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	619a      	str	r2, [r3, #24]
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e267      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d075      	beq.n	8001f12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e26:	4b88      	ldr	r3, [pc, #544]	@ (8002048 <HAL_RCC_OscConfig+0x240>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	d00c      	beq.n	8001e4c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e32:	4b85      	ldr	r3, [pc, #532]	@ (8002048 <HAL_RCC_OscConfig+0x240>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d112      	bne.n	8001e64 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e3e:	4b82      	ldr	r3, [pc, #520]	@ (8002048 <HAL_RCC_OscConfig+0x240>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e4a:	d10b      	bne.n	8001e64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4c:	4b7e      	ldr	r3, [pc, #504]	@ (8002048 <HAL_RCC_OscConfig+0x240>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d05b      	beq.n	8001f10 <HAL_RCC_OscConfig+0x108>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d157      	bne.n	8001f10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e242      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e6c:	d106      	bne.n	8001e7c <HAL_RCC_OscConfig+0x74>
 8001e6e:	4b76      	ldr	r3, [pc, #472]	@ (8002048 <HAL_RCC_OscConfig+0x240>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a75      	ldr	r2, [pc, #468]	@ (8002048 <HAL_RCC_OscConfig+0x240>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	e01d      	b.n	8001eb8 <HAL_RCC_OscConfig+0xb0>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e84:	d10c      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x98>
 8001e86:	4b70      	ldr	r3, [pc, #448]	@ (8002048 <HAL_RCC_OscConfig+0x240>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a6f      	ldr	r2, [pc, #444]	@ (8002048 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	4b6d      	ldr	r3, [pc, #436]	@ (8002048 <HAL_RCC_OscConfig+0x240>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a6c      	ldr	r2, [pc, #432]	@ (8002048 <HAL_RCC_OscConfig+0x240>)
 8001e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	e00b      	b.n	8001eb8 <HAL_RCC_OscConfig+0xb0>
 8001ea0:	4b69      	ldr	r3, [pc, #420]	@ (8002048 <HAL_RCC_OscConfig+0x240>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a68      	ldr	r2, [pc, #416]	@ (8002048 <HAL_RCC_OscConfig+0x240>)
 8001ea6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	4b66      	ldr	r3, [pc, #408]	@ (8002048 <HAL_RCC_OscConfig+0x240>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a65      	ldr	r2, [pc, #404]	@ (8002048 <HAL_RCC_OscConfig+0x240>)
 8001eb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d013      	beq.n	8001ee8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec0:	f7ff fcc2 	bl	8001848 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec8:	f7ff fcbe 	bl	8001848 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b64      	cmp	r3, #100	@ 0x64
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e207      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eda:	4b5b      	ldr	r3, [pc, #364]	@ (8002048 <HAL_RCC_OscConfig+0x240>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0xc0>
 8001ee6:	e014      	b.n	8001f12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee8:	f7ff fcae 	bl	8001848 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef0:	f7ff fcaa 	bl	8001848 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b64      	cmp	r3, #100	@ 0x64
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e1f3      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f02:	4b51      	ldr	r3, [pc, #324]	@ (8002048 <HAL_RCC_OscConfig+0x240>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f0      	bne.n	8001ef0 <HAL_RCC_OscConfig+0xe8>
 8001f0e:	e000      	b.n	8001f12 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d063      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002048 <HAL_RCC_OscConfig+0x240>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00b      	beq.n	8001f42 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f2a:	4b47      	ldr	r3, [pc, #284]	@ (8002048 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d11c      	bne.n	8001f70 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f36:	4b44      	ldr	r3, [pc, #272]	@ (8002048 <HAL_RCC_OscConfig+0x240>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d116      	bne.n	8001f70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f42:	4b41      	ldr	r3, [pc, #260]	@ (8002048 <HAL_RCC_OscConfig+0x240>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d005      	beq.n	8001f5a <HAL_RCC_OscConfig+0x152>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d001      	beq.n	8001f5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e1c7      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5a:	4b3b      	ldr	r3, [pc, #236]	@ (8002048 <HAL_RCC_OscConfig+0x240>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4937      	ldr	r1, [pc, #220]	@ (8002048 <HAL_RCC_OscConfig+0x240>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f6e:	e03a      	b.n	8001fe6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d020      	beq.n	8001fba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f78:	4b34      	ldr	r3, [pc, #208]	@ (800204c <HAL_RCC_OscConfig+0x244>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7e:	f7ff fc63 	bl	8001848 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f86:	f7ff fc5f 	bl	8001848 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e1a8      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f98:	4b2b      	ldr	r3, [pc, #172]	@ (8002048 <HAL_RCC_OscConfig+0x240>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0f0      	beq.n	8001f86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa4:	4b28      	ldr	r3, [pc, #160]	@ (8002048 <HAL_RCC_OscConfig+0x240>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4925      	ldr	r1, [pc, #148]	@ (8002048 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	600b      	str	r3, [r1, #0]
 8001fb8:	e015      	b.n	8001fe6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fba:	4b24      	ldr	r3, [pc, #144]	@ (800204c <HAL_RCC_OscConfig+0x244>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7ff fc42 	bl	8001848 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc8:	f7ff fc3e 	bl	8001848 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e187      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fda:	4b1b      	ldr	r3, [pc, #108]	@ (8002048 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d036      	beq.n	8002060 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d016      	beq.n	8002028 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ffa:	4b15      	ldr	r3, [pc, #84]	@ (8002050 <HAL_RCC_OscConfig+0x248>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002000:	f7ff fc22 	bl	8001848 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002008:	f7ff fc1e 	bl	8001848 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e167      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201a:	4b0b      	ldr	r3, [pc, #44]	@ (8002048 <HAL_RCC_OscConfig+0x240>)
 800201c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0f0      	beq.n	8002008 <HAL_RCC_OscConfig+0x200>
 8002026:	e01b      	b.n	8002060 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002028:	4b09      	ldr	r3, [pc, #36]	@ (8002050 <HAL_RCC_OscConfig+0x248>)
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202e:	f7ff fc0b 	bl	8001848 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002034:	e00e      	b.n	8002054 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002036:	f7ff fc07 	bl	8001848 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d907      	bls.n	8002054 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e150      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
 8002048:	40023800 	.word	0x40023800
 800204c:	42470000 	.word	0x42470000
 8002050:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002054:	4b88      	ldr	r3, [pc, #544]	@ (8002278 <HAL_RCC_OscConfig+0x470>)
 8002056:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1ea      	bne.n	8002036 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 8097 	beq.w	800219c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800206e:	2300      	movs	r3, #0
 8002070:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002072:	4b81      	ldr	r3, [pc, #516]	@ (8002278 <HAL_RCC_OscConfig+0x470>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10f      	bne.n	800209e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	4b7d      	ldr	r3, [pc, #500]	@ (8002278 <HAL_RCC_OscConfig+0x470>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002086:	4a7c      	ldr	r2, [pc, #496]	@ (8002278 <HAL_RCC_OscConfig+0x470>)
 8002088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800208c:	6413      	str	r3, [r2, #64]	@ 0x40
 800208e:	4b7a      	ldr	r3, [pc, #488]	@ (8002278 <HAL_RCC_OscConfig+0x470>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800209a:	2301      	movs	r3, #1
 800209c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209e:	4b77      	ldr	r3, [pc, #476]	@ (800227c <HAL_RCC_OscConfig+0x474>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d118      	bne.n	80020dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020aa:	4b74      	ldr	r3, [pc, #464]	@ (800227c <HAL_RCC_OscConfig+0x474>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a73      	ldr	r2, [pc, #460]	@ (800227c <HAL_RCC_OscConfig+0x474>)
 80020b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b6:	f7ff fbc7 	bl	8001848 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020be:	f7ff fbc3 	bl	8001848 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e10c      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d0:	4b6a      	ldr	r3, [pc, #424]	@ (800227c <HAL_RCC_OscConfig+0x474>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0f0      	beq.n	80020be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d106      	bne.n	80020f2 <HAL_RCC_OscConfig+0x2ea>
 80020e4:	4b64      	ldr	r3, [pc, #400]	@ (8002278 <HAL_RCC_OscConfig+0x470>)
 80020e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e8:	4a63      	ldr	r2, [pc, #396]	@ (8002278 <HAL_RCC_OscConfig+0x470>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80020f0:	e01c      	b.n	800212c <HAL_RCC_OscConfig+0x324>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b05      	cmp	r3, #5
 80020f8:	d10c      	bne.n	8002114 <HAL_RCC_OscConfig+0x30c>
 80020fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002278 <HAL_RCC_OscConfig+0x470>)
 80020fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020fe:	4a5e      	ldr	r2, [pc, #376]	@ (8002278 <HAL_RCC_OscConfig+0x470>)
 8002100:	f043 0304 	orr.w	r3, r3, #4
 8002104:	6713      	str	r3, [r2, #112]	@ 0x70
 8002106:	4b5c      	ldr	r3, [pc, #368]	@ (8002278 <HAL_RCC_OscConfig+0x470>)
 8002108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800210a:	4a5b      	ldr	r2, [pc, #364]	@ (8002278 <HAL_RCC_OscConfig+0x470>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6713      	str	r3, [r2, #112]	@ 0x70
 8002112:	e00b      	b.n	800212c <HAL_RCC_OscConfig+0x324>
 8002114:	4b58      	ldr	r3, [pc, #352]	@ (8002278 <HAL_RCC_OscConfig+0x470>)
 8002116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002118:	4a57      	ldr	r2, [pc, #348]	@ (8002278 <HAL_RCC_OscConfig+0x470>)
 800211a:	f023 0301 	bic.w	r3, r3, #1
 800211e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002120:	4b55      	ldr	r3, [pc, #340]	@ (8002278 <HAL_RCC_OscConfig+0x470>)
 8002122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002124:	4a54      	ldr	r2, [pc, #336]	@ (8002278 <HAL_RCC_OscConfig+0x470>)
 8002126:	f023 0304 	bic.w	r3, r3, #4
 800212a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d015      	beq.n	8002160 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002134:	f7ff fb88 	bl	8001848 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213a:	e00a      	b.n	8002152 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213c:	f7ff fb84 	bl	8001848 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800214a:	4293      	cmp	r3, r2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e0cb      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002152:	4b49      	ldr	r3, [pc, #292]	@ (8002278 <HAL_RCC_OscConfig+0x470>)
 8002154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0ee      	beq.n	800213c <HAL_RCC_OscConfig+0x334>
 800215e:	e014      	b.n	800218a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002160:	f7ff fb72 	bl	8001848 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002166:	e00a      	b.n	800217e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002168:	f7ff fb6e 	bl	8001848 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002176:	4293      	cmp	r3, r2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e0b5      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800217e:	4b3e      	ldr	r3, [pc, #248]	@ (8002278 <HAL_RCC_OscConfig+0x470>)
 8002180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1ee      	bne.n	8002168 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800218a:	7dfb      	ldrb	r3, [r7, #23]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d105      	bne.n	800219c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002190:	4b39      	ldr	r3, [pc, #228]	@ (8002278 <HAL_RCC_OscConfig+0x470>)
 8002192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002194:	4a38      	ldr	r2, [pc, #224]	@ (8002278 <HAL_RCC_OscConfig+0x470>)
 8002196:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800219a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 80a1 	beq.w	80022e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021a6:	4b34      	ldr	r3, [pc, #208]	@ (8002278 <HAL_RCC_OscConfig+0x470>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d05c      	beq.n	800226c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d141      	bne.n	800223e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ba:	4b31      	ldr	r3, [pc, #196]	@ (8002280 <HAL_RCC_OscConfig+0x478>)
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7ff fb42 	bl	8001848 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c8:	f7ff fb3e 	bl	8001848 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e087      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021da:	4b27      	ldr	r3, [pc, #156]	@ (8002278 <HAL_RCC_OscConfig+0x470>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69da      	ldr	r2, [r3, #28]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f4:	019b      	lsls	r3, r3, #6
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fc:	085b      	lsrs	r3, r3, #1
 80021fe:	3b01      	subs	r3, #1
 8002200:	041b      	lsls	r3, r3, #16
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002208:	061b      	lsls	r3, r3, #24
 800220a:	491b      	ldr	r1, [pc, #108]	@ (8002278 <HAL_RCC_OscConfig+0x470>)
 800220c:	4313      	orrs	r3, r2
 800220e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002210:	4b1b      	ldr	r3, [pc, #108]	@ (8002280 <HAL_RCC_OscConfig+0x478>)
 8002212:	2201      	movs	r2, #1
 8002214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002216:	f7ff fb17 	bl	8001848 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221e:	f7ff fb13 	bl	8001848 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e05c      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002230:	4b11      	ldr	r3, [pc, #68]	@ (8002278 <HAL_RCC_OscConfig+0x470>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCC_OscConfig+0x416>
 800223c:	e054      	b.n	80022e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223e:	4b10      	ldr	r3, [pc, #64]	@ (8002280 <HAL_RCC_OscConfig+0x478>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7ff fb00 	bl	8001848 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224c:	f7ff fafc 	bl	8001848 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e045      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225e:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <HAL_RCC_OscConfig+0x470>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x444>
 800226a:	e03d      	b.n	80022e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d107      	bne.n	8002284 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e038      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
 8002278:	40023800 	.word	0x40023800
 800227c:	40007000 	.word	0x40007000
 8002280:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002284:	4b1b      	ldr	r3, [pc, #108]	@ (80022f4 <HAL_RCC_OscConfig+0x4ec>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d028      	beq.n	80022e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800229c:	429a      	cmp	r2, r3
 800229e:	d121      	bne.n	80022e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d11a      	bne.n	80022e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022b4:	4013      	ands	r3, r2
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022bc:	4293      	cmp	r3, r2
 80022be:	d111      	bne.n	80022e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ca:	085b      	lsrs	r3, r3, #1
 80022cc:	3b01      	subs	r3, #1
 80022ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d107      	bne.n	80022e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e000      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800

080022f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0cc      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800230c:	4b68      	ldr	r3, [pc, #416]	@ (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d90c      	bls.n	8002334 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231a:	4b65      	ldr	r3, [pc, #404]	@ (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002322:	4b63      	ldr	r3, [pc, #396]	@ (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0b8      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d020      	beq.n	8002382 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800234c:	4b59      	ldr	r3, [pc, #356]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	4a58      	ldr	r2, [pc, #352]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002356:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002364:	4b53      	ldr	r3, [pc, #332]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	4a52      	ldr	r2, [pc, #328]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800236e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002370:	4b50      	ldr	r3, [pc, #320]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	494d      	ldr	r1, [pc, #308]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	4313      	orrs	r3, r2
 8002380:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d044      	beq.n	8002418 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d107      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002396:	4b47      	ldr	r3, [pc, #284]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d119      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e07f      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d003      	beq.n	80023b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d107      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b6:	4b3f      	ldr	r3, [pc, #252]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d109      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e06f      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c6:	4b3b      	ldr	r3, [pc, #236]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e067      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023d6:	4b37      	ldr	r3, [pc, #220]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f023 0203 	bic.w	r2, r3, #3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	4934      	ldr	r1, [pc, #208]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e8:	f7ff fa2e 	bl	8001848 <HAL_GetTick>
 80023ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ee:	e00a      	b.n	8002406 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f0:	f7ff fa2a 	bl	8001848 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023fe:	4293      	cmp	r3, r2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e04f      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002406:	4b2b      	ldr	r3, [pc, #172]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 020c 	and.w	r2, r3, #12
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	429a      	cmp	r2, r3
 8002416:	d1eb      	bne.n	80023f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002418:	4b25      	ldr	r3, [pc, #148]	@ (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d20c      	bcs.n	8002440 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002426:	4b22      	ldr	r3, [pc, #136]	@ (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800242e:	4b20      	ldr	r3, [pc, #128]	@ (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d001      	beq.n	8002440 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e032      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800244c:	4b19      	ldr	r3, [pc, #100]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	4916      	ldr	r1, [pc, #88]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	4313      	orrs	r3, r2
 800245c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d009      	beq.n	800247e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800246a:	4b12      	ldr	r3, [pc, #72]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	490e      	ldr	r1, [pc, #56]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	4313      	orrs	r3, r2
 800247c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800247e:	f000 f821 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 8002482:	4602      	mov	r2, r0
 8002484:	4b0b      	ldr	r3, [pc, #44]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	490a      	ldr	r1, [pc, #40]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	5ccb      	ldrb	r3, [r1, r3]
 8002492:	fa22 f303 	lsr.w	r3, r2, r3
 8002496:	4a09      	ldr	r2, [pc, #36]	@ (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800249a:	4b09      	ldr	r3, [pc, #36]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff f98e 	bl	80017c0 <HAL_InitTick>

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023c00 	.word	0x40023c00
 80024b4:	40023800 	.word	0x40023800
 80024b8:	08004da8 	.word	0x08004da8
 80024bc:	20000000 	.word	0x20000000
 80024c0:	20000004 	.word	0x20000004

080024c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024c8:	b090      	sub	sp, #64	@ 0x40
 80024ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024dc:	4b59      	ldr	r3, [pc, #356]	@ (8002644 <HAL_RCC_GetSysClockFreq+0x180>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 030c 	and.w	r3, r3, #12
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d00d      	beq.n	8002504 <HAL_RCC_GetSysClockFreq+0x40>
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	f200 80a1 	bhi.w	8002630 <HAL_RCC_GetSysClockFreq+0x16c>
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <HAL_RCC_GetSysClockFreq+0x34>
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d003      	beq.n	80024fe <HAL_RCC_GetSysClockFreq+0x3a>
 80024f6:	e09b      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024f8:	4b53      	ldr	r3, [pc, #332]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x184>)
 80024fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024fc:	e09b      	b.n	8002636 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024fe:	4b53      	ldr	r3, [pc, #332]	@ (800264c <HAL_RCC_GetSysClockFreq+0x188>)
 8002500:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002502:	e098      	b.n	8002636 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002504:	4b4f      	ldr	r3, [pc, #316]	@ (8002644 <HAL_RCC_GetSysClockFreq+0x180>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800250c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800250e:	4b4d      	ldr	r3, [pc, #308]	@ (8002644 <HAL_RCC_GetSysClockFreq+0x180>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d028      	beq.n	800256c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800251a:	4b4a      	ldr	r3, [pc, #296]	@ (8002644 <HAL_RCC_GetSysClockFreq+0x180>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	099b      	lsrs	r3, r3, #6
 8002520:	2200      	movs	r2, #0
 8002522:	623b      	str	r3, [r7, #32]
 8002524:	627a      	str	r2, [r7, #36]	@ 0x24
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800252c:	2100      	movs	r1, #0
 800252e:	4b47      	ldr	r3, [pc, #284]	@ (800264c <HAL_RCC_GetSysClockFreq+0x188>)
 8002530:	fb03 f201 	mul.w	r2, r3, r1
 8002534:	2300      	movs	r3, #0
 8002536:	fb00 f303 	mul.w	r3, r0, r3
 800253a:	4413      	add	r3, r2
 800253c:	4a43      	ldr	r2, [pc, #268]	@ (800264c <HAL_RCC_GetSysClockFreq+0x188>)
 800253e:	fba0 1202 	umull	r1, r2, r0, r2
 8002542:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002544:	460a      	mov	r2, r1
 8002546:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002548:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800254a:	4413      	add	r3, r2
 800254c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800254e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002550:	2200      	movs	r2, #0
 8002552:	61bb      	str	r3, [r7, #24]
 8002554:	61fa      	str	r2, [r7, #28]
 8002556:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800255a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800255e:	f7fe fa7d 	bl	8000a5c <__aeabi_uldivmod>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4613      	mov	r3, r2
 8002568:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800256a:	e053      	b.n	8002614 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800256c:	4b35      	ldr	r3, [pc, #212]	@ (8002644 <HAL_RCC_GetSysClockFreq+0x180>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	099b      	lsrs	r3, r3, #6
 8002572:	2200      	movs	r2, #0
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	617a      	str	r2, [r7, #20]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800257e:	f04f 0b00 	mov.w	fp, #0
 8002582:	4652      	mov	r2, sl
 8002584:	465b      	mov	r3, fp
 8002586:	f04f 0000 	mov.w	r0, #0
 800258a:	f04f 0100 	mov.w	r1, #0
 800258e:	0159      	lsls	r1, r3, #5
 8002590:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002594:	0150      	lsls	r0, r2, #5
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	ebb2 080a 	subs.w	r8, r2, sl
 800259e:	eb63 090b 	sbc.w	r9, r3, fp
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80025b6:	ebb2 0408 	subs.w	r4, r2, r8
 80025ba:	eb63 0509 	sbc.w	r5, r3, r9
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	00eb      	lsls	r3, r5, #3
 80025c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025cc:	00e2      	lsls	r2, r4, #3
 80025ce:	4614      	mov	r4, r2
 80025d0:	461d      	mov	r5, r3
 80025d2:	eb14 030a 	adds.w	r3, r4, sl
 80025d6:	603b      	str	r3, [r7, #0]
 80025d8:	eb45 030b 	adc.w	r3, r5, fp
 80025dc:	607b      	str	r3, [r7, #4]
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025ea:	4629      	mov	r1, r5
 80025ec:	028b      	lsls	r3, r1, #10
 80025ee:	4621      	mov	r1, r4
 80025f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025f4:	4621      	mov	r1, r4
 80025f6:	028a      	lsls	r2, r1, #10
 80025f8:	4610      	mov	r0, r2
 80025fa:	4619      	mov	r1, r3
 80025fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025fe:	2200      	movs	r2, #0
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	60fa      	str	r2, [r7, #12]
 8002604:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002608:	f7fe fa28 	bl	8000a5c <__aeabi_uldivmod>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4613      	mov	r3, r2
 8002612:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002614:	4b0b      	ldr	r3, [pc, #44]	@ (8002644 <HAL_RCC_GetSysClockFreq+0x180>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	0c1b      	lsrs	r3, r3, #16
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	3301      	adds	r3, #1
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002624:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002628:	fbb2 f3f3 	udiv	r3, r2, r3
 800262c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800262e:	e002      	b.n	8002636 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002630:	4b05      	ldr	r3, [pc, #20]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x184>)
 8002632:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002634:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002638:	4618      	mov	r0, r3
 800263a:	3740      	adds	r7, #64	@ 0x40
 800263c:	46bd      	mov	sp, r7
 800263e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002642:	bf00      	nop
 8002644:	40023800 	.word	0x40023800
 8002648:	00f42400 	.word	0x00f42400
 800264c:	017d7840 	.word	0x017d7840

08002650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002654:	4b03      	ldr	r3, [pc, #12]	@ (8002664 <HAL_RCC_GetHCLKFreq+0x14>)
 8002656:	681b      	ldr	r3, [r3, #0]
}
 8002658:	4618      	mov	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	20000000 	.word	0x20000000

08002668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800266c:	f7ff fff0 	bl	8002650 <HAL_RCC_GetHCLKFreq>
 8002670:	4602      	mov	r2, r0
 8002672:	4b05      	ldr	r3, [pc, #20]	@ (8002688 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	0a9b      	lsrs	r3, r3, #10
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	4903      	ldr	r1, [pc, #12]	@ (800268c <HAL_RCC_GetPCLK1Freq+0x24>)
 800267e:	5ccb      	ldrb	r3, [r1, r3]
 8002680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002684:	4618      	mov	r0, r3
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40023800 	.word	0x40023800
 800268c:	08004db8 	.word	0x08004db8

08002690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002694:	f7ff ffdc 	bl	8002650 <HAL_RCC_GetHCLKFreq>
 8002698:	4602      	mov	r2, r0
 800269a:	4b05      	ldr	r3, [pc, #20]	@ (80026b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	0b5b      	lsrs	r3, r3, #13
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	4903      	ldr	r1, [pc, #12]	@ (80026b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026a6:	5ccb      	ldrb	r3, [r1, r3]
 80026a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40023800 	.word	0x40023800
 80026b4:	08004db8 	.word	0x08004db8

080026b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e041      	b.n	800274e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7fe fe46 	bl	8001370 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3304      	adds	r3, #4
 80026f4:	4619      	mov	r1, r3
 80026f6:	4610      	mov	r0, r2
 80026f8:	f000 fcbc 	bl	8003074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b01      	cmp	r3, #1
 800276a:	d001      	beq.n	8002770 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e03c      	b.n	80027ea <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2202      	movs	r2, #2
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a1e      	ldr	r2, [pc, #120]	@ (80027f8 <HAL_TIM_Base_Start+0xa0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d018      	beq.n	80027b4 <HAL_TIM_Base_Start+0x5c>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800278a:	d013      	beq.n	80027b4 <HAL_TIM_Base_Start+0x5c>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a1a      	ldr	r2, [pc, #104]	@ (80027fc <HAL_TIM_Base_Start+0xa4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d00e      	beq.n	80027b4 <HAL_TIM_Base_Start+0x5c>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a19      	ldr	r2, [pc, #100]	@ (8002800 <HAL_TIM_Base_Start+0xa8>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d009      	beq.n	80027b4 <HAL_TIM_Base_Start+0x5c>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a17      	ldr	r2, [pc, #92]	@ (8002804 <HAL_TIM_Base_Start+0xac>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d004      	beq.n	80027b4 <HAL_TIM_Base_Start+0x5c>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a16      	ldr	r2, [pc, #88]	@ (8002808 <HAL_TIM_Base_Start+0xb0>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d111      	bne.n	80027d8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2b06      	cmp	r3, #6
 80027c4:	d010      	beq.n	80027e8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f042 0201 	orr.w	r2, r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027d6:	e007      	b.n	80027e8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0201 	orr.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40010000 	.word	0x40010000
 80027fc:	40000400 	.word	0x40000400
 8002800:	40000800 	.word	0x40000800
 8002804:	40000c00 	.word	0x40000c00
 8002808:	40014000 	.word	0x40014000

0800280c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e041      	b.n	80028a2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f839 	bl	80028aa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3304      	adds	r3, #4
 8002848:	4619      	mov	r1, r3
 800284a:	4610      	mov	r0, r2
 800284c:	f000 fc12 	bl	8003074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d104      	bne.n	80028de <HAL_TIM_IC_Start_IT+0x1e>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	e013      	b.n	8002906 <HAL_TIM_IC_Start_IT+0x46>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d104      	bne.n	80028ee <HAL_TIM_IC_Start_IT+0x2e>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	e00b      	b.n	8002906 <HAL_TIM_IC_Start_IT+0x46>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d104      	bne.n	80028fe <HAL_TIM_IC_Start_IT+0x3e>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	e003      	b.n	8002906 <HAL_TIM_IC_Start_IT+0x46>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002904:	b2db      	uxtb	r3, r3
 8002906:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d104      	bne.n	8002918 <HAL_TIM_IC_Start_IT+0x58>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002914:	b2db      	uxtb	r3, r3
 8002916:	e013      	b.n	8002940 <HAL_TIM_IC_Start_IT+0x80>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	2b04      	cmp	r3, #4
 800291c:	d104      	bne.n	8002928 <HAL_TIM_IC_Start_IT+0x68>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002924:	b2db      	uxtb	r3, r3
 8002926:	e00b      	b.n	8002940 <HAL_TIM_IC_Start_IT+0x80>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	2b08      	cmp	r3, #8
 800292c:	d104      	bne.n	8002938 <HAL_TIM_IC_Start_IT+0x78>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002934:	b2db      	uxtb	r3, r3
 8002936:	e003      	b.n	8002940 <HAL_TIM_IC_Start_IT+0x80>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800293e:	b2db      	uxtb	r3, r3
 8002940:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002942:	7bbb      	ldrb	r3, [r7, #14]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d102      	bne.n	800294e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002948:	7b7b      	ldrb	r3, [r7, #13]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d001      	beq.n	8002952 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e0c2      	b.n	8002ad8 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d104      	bne.n	8002962 <HAL_TIM_IC_Start_IT+0xa2>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002960:	e013      	b.n	800298a <HAL_TIM_IC_Start_IT+0xca>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b04      	cmp	r3, #4
 8002966:	d104      	bne.n	8002972 <HAL_TIM_IC_Start_IT+0xb2>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002970:	e00b      	b.n	800298a <HAL_TIM_IC_Start_IT+0xca>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b08      	cmp	r3, #8
 8002976:	d104      	bne.n	8002982 <HAL_TIM_IC_Start_IT+0xc2>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002980:	e003      	b.n	800298a <HAL_TIM_IC_Start_IT+0xca>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2202      	movs	r2, #2
 8002986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d104      	bne.n	800299a <HAL_TIM_IC_Start_IT+0xda>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002998:	e013      	b.n	80029c2 <HAL_TIM_IC_Start_IT+0x102>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b04      	cmp	r3, #4
 800299e:	d104      	bne.n	80029aa <HAL_TIM_IC_Start_IT+0xea>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029a8:	e00b      	b.n	80029c2 <HAL_TIM_IC_Start_IT+0x102>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d104      	bne.n	80029ba <HAL_TIM_IC_Start_IT+0xfa>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029b8:	e003      	b.n	80029c2 <HAL_TIM_IC_Start_IT+0x102>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2202      	movs	r2, #2
 80029be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b0c      	cmp	r3, #12
 80029c6:	d841      	bhi.n	8002a4c <HAL_TIM_IC_Start_IT+0x18c>
 80029c8:	a201      	add	r2, pc, #4	@ (adr r2, 80029d0 <HAL_TIM_IC_Start_IT+0x110>)
 80029ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ce:	bf00      	nop
 80029d0:	08002a05 	.word	0x08002a05
 80029d4:	08002a4d 	.word	0x08002a4d
 80029d8:	08002a4d 	.word	0x08002a4d
 80029dc:	08002a4d 	.word	0x08002a4d
 80029e0:	08002a17 	.word	0x08002a17
 80029e4:	08002a4d 	.word	0x08002a4d
 80029e8:	08002a4d 	.word	0x08002a4d
 80029ec:	08002a4d 	.word	0x08002a4d
 80029f0:	08002a29 	.word	0x08002a29
 80029f4:	08002a4d 	.word	0x08002a4d
 80029f8:	08002a4d 	.word	0x08002a4d
 80029fc:	08002a4d 	.word	0x08002a4d
 8002a00:	08002a3b 	.word	0x08002a3b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0202 	orr.w	r2, r2, #2
 8002a12:	60da      	str	r2, [r3, #12]
      break;
 8002a14:	e01d      	b.n	8002a52 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0204 	orr.w	r2, r2, #4
 8002a24:	60da      	str	r2, [r3, #12]
      break;
 8002a26:	e014      	b.n	8002a52 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0208 	orr.w	r2, r2, #8
 8002a36:	60da      	str	r2, [r3, #12]
      break;
 8002a38:	e00b      	b.n	8002a52 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 0210 	orr.w	r2, r2, #16
 8002a48:	60da      	str	r2, [r3, #12]
      break;
 8002a4a:	e002      	b.n	8002a52 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a50:	bf00      	nop
  }

  if (status == HAL_OK)
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d13e      	bne.n	8002ad6 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	6839      	ldr	r1, [r7, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 fd4b 	bl	80034fc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ae0 <HAL_TIM_IC_Start_IT+0x220>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d018      	beq.n	8002aa2 <HAL_TIM_IC_Start_IT+0x1e2>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a78:	d013      	beq.n	8002aa2 <HAL_TIM_IC_Start_IT+0x1e2>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a19      	ldr	r2, [pc, #100]	@ (8002ae4 <HAL_TIM_IC_Start_IT+0x224>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d00e      	beq.n	8002aa2 <HAL_TIM_IC_Start_IT+0x1e2>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a17      	ldr	r2, [pc, #92]	@ (8002ae8 <HAL_TIM_IC_Start_IT+0x228>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d009      	beq.n	8002aa2 <HAL_TIM_IC_Start_IT+0x1e2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a16      	ldr	r2, [pc, #88]	@ (8002aec <HAL_TIM_IC_Start_IT+0x22c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d004      	beq.n	8002aa2 <HAL_TIM_IC_Start_IT+0x1e2>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a14      	ldr	r2, [pc, #80]	@ (8002af0 <HAL_TIM_IC_Start_IT+0x230>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d111      	bne.n	8002ac6 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b06      	cmp	r3, #6
 8002ab2:	d010      	beq.n	8002ad6 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac4:	e007      	b.n	8002ad6 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0201 	orr.w	r2, r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40010000 	.word	0x40010000
 8002ae4:	40000400 	.word	0x40000400
 8002ae8:	40000800 	.word	0x40000800
 8002aec:	40000c00 	.word	0x40000c00
 8002af0:	40014000 	.word	0x40014000

08002af4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d020      	beq.n	8002b58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d01b      	beq.n	8002b58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f06f 0202 	mvn.w	r2, #2
 8002b28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7fe f906 	bl	8000d50 <HAL_TIM_IC_CaptureCallback>
 8002b44:	e005      	b.n	8002b52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fa76 	bl	8003038 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 fa7d 	bl	800304c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d020      	beq.n	8002ba4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d01b      	beq.n	8002ba4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f06f 0204 	mvn.w	r2, #4
 8002b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2202      	movs	r2, #2
 8002b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7fe f8e0 	bl	8000d50 <HAL_TIM_IC_CaptureCallback>
 8002b90:	e005      	b.n	8002b9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fa50 	bl	8003038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 fa57 	bl	800304c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d020      	beq.n	8002bf0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d01b      	beq.n	8002bf0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0208 	mvn.w	r2, #8
 8002bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2204      	movs	r2, #4
 8002bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7fe f8ba 	bl	8000d50 <HAL_TIM_IC_CaptureCallback>
 8002bdc:	e005      	b.n	8002bea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 fa2a 	bl	8003038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 fa31 	bl	800304c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d020      	beq.n	8002c3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d01b      	beq.n	8002c3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0210 	mvn.w	r2, #16
 8002c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2208      	movs	r2, #8
 8002c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fe f894 	bl	8000d50 <HAL_TIM_IC_CaptureCallback>
 8002c28:	e005      	b.n	8002c36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fa04 	bl	8003038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 fa0b 	bl	800304c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00c      	beq.n	8002c60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d007      	beq.n	8002c60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f06f 0201 	mvn.w	r2, #1
 8002c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f9e2 	bl	8003024 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00c      	beq.n	8002c84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d007      	beq.n	8002c84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 fcda 	bl	8003638 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00c      	beq.n	8002ca8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d007      	beq.n	8002ca8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f9dc 	bl	8003060 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00c      	beq.n	8002ccc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d007      	beq.n	8002ccc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0220 	mvn.w	r2, #32
 8002cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fcac 	bl	8003624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ccc:	bf00      	nop
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e088      	b.n	8002e04 <HAL_TIM_IC_ConfigChannel+0x130>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d11b      	bne.n	8002d38 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002d10:	f000 fa3c 	bl	800318c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699a      	ldr	r2, [r3, #24]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 020c 	bic.w	r2, r2, #12
 8002d22:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6999      	ldr	r1, [r3, #24]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	619a      	str	r2, [r3, #24]
 8002d36:	e060      	b.n	8002dfa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d11c      	bne.n	8002d78 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002d4e:	f000 fab4 	bl	80032ba <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699a      	ldr	r2, [r3, #24]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002d60:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6999      	ldr	r1, [r3, #24]
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	021a      	lsls	r2, r3, #8
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	619a      	str	r2, [r3, #24]
 8002d76:	e040      	b.n	8002dfa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d11b      	bne.n	8002db6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002d8e:	f000 fb01 	bl	8003394 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	69da      	ldr	r2, [r3, #28]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 020c 	bic.w	r2, r2, #12
 8002da0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	69d9      	ldr	r1, [r3, #28]
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	61da      	str	r2, [r3, #28]
 8002db4:	e021      	b.n	8002dfa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b0c      	cmp	r3, #12
 8002dba:	d11c      	bne.n	8002df6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002dcc:	f000 fb1e 	bl	800340c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	69da      	ldr	r2, [r3, #28]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002dde:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	69d9      	ldr	r1, [r3, #28]
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	021a      	lsls	r2, r3, #8
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	61da      	str	r2, [r3, #28]
 8002df4:	e001      	b.n	8002dfa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_TIM_ConfigClockSource+0x1c>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e0b4      	b.n	8002f92 <HAL_TIM_ConfigClockSource+0x186>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002e46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e60:	d03e      	beq.n	8002ee0 <HAL_TIM_ConfigClockSource+0xd4>
 8002e62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e66:	f200 8087 	bhi.w	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e6e:	f000 8086 	beq.w	8002f7e <HAL_TIM_ConfigClockSource+0x172>
 8002e72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e76:	d87f      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e78:	2b70      	cmp	r3, #112	@ 0x70
 8002e7a:	d01a      	beq.n	8002eb2 <HAL_TIM_ConfigClockSource+0xa6>
 8002e7c:	2b70      	cmp	r3, #112	@ 0x70
 8002e7e:	d87b      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e80:	2b60      	cmp	r3, #96	@ 0x60
 8002e82:	d050      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0x11a>
 8002e84:	2b60      	cmp	r3, #96	@ 0x60
 8002e86:	d877      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e88:	2b50      	cmp	r3, #80	@ 0x50
 8002e8a:	d03c      	beq.n	8002f06 <HAL_TIM_ConfigClockSource+0xfa>
 8002e8c:	2b50      	cmp	r3, #80	@ 0x50
 8002e8e:	d873      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e90:	2b40      	cmp	r3, #64	@ 0x40
 8002e92:	d058      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0x13a>
 8002e94:	2b40      	cmp	r3, #64	@ 0x40
 8002e96:	d86f      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e98:	2b30      	cmp	r3, #48	@ 0x30
 8002e9a:	d064      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x15a>
 8002e9c:	2b30      	cmp	r3, #48	@ 0x30
 8002e9e:	d86b      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	d060      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x15a>
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	d867      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d05c      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x15a>
 8002eac:	2b10      	cmp	r3, #16
 8002eae:	d05a      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x15a>
 8002eb0:	e062      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ec2:	f000 fafb 	bl	80034bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ed4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	609a      	str	r2, [r3, #8]
      break;
 8002ede:	e04f      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ef0:	f000 fae4 	bl	80034bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f02:	609a      	str	r2, [r3, #8]
      break;
 8002f04:	e03c      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f12:	461a      	mov	r2, r3
 8002f14:	f000 f9a2 	bl	800325c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2150      	movs	r1, #80	@ 0x50
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fab1 	bl	8003486 <TIM_ITRx_SetConfig>
      break;
 8002f24:	e02c      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f32:	461a      	mov	r2, r3
 8002f34:	f000 f9fe 	bl	8003334 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2160      	movs	r1, #96	@ 0x60
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 faa1 	bl	8003486 <TIM_ITRx_SetConfig>
      break;
 8002f44:	e01c      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f52:	461a      	mov	r2, r3
 8002f54:	f000 f982 	bl	800325c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2140      	movs	r1, #64	@ 0x40
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fa91 	bl	8003486 <TIM_ITRx_SetConfig>
      break;
 8002f64:	e00c      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4610      	mov	r0, r2
 8002f72:	f000 fa88 	bl	8003486 <TIM_ITRx_SetConfig>
      break;
 8002f76:	e003      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f7c:	e000      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b0c      	cmp	r3, #12
 8002fae:	d831      	bhi.n	8003014 <HAL_TIM_ReadCapturedValue+0x78>
 8002fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8002fb8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb6:	bf00      	nop
 8002fb8:	08002fed 	.word	0x08002fed
 8002fbc:	08003015 	.word	0x08003015
 8002fc0:	08003015 	.word	0x08003015
 8002fc4:	08003015 	.word	0x08003015
 8002fc8:	08002ff7 	.word	0x08002ff7
 8002fcc:	08003015 	.word	0x08003015
 8002fd0:	08003015 	.word	0x08003015
 8002fd4:	08003015 	.word	0x08003015
 8002fd8:	08003001 	.word	0x08003001
 8002fdc:	08003015 	.word	0x08003015
 8002fe0:	08003015 	.word	0x08003015
 8002fe4:	08003015 	.word	0x08003015
 8002fe8:	0800300b 	.word	0x0800300b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ff2:	60fb      	str	r3, [r7, #12]

      break;
 8002ff4:	e00f      	b.n	8003016 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffc:	60fb      	str	r3, [r7, #12]

      break;
 8002ffe:	e00a      	b.n	8003016 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003006:	60fb      	str	r3, [r7, #12]

      break;
 8003008:	e005      	b.n	8003016 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003010:	60fb      	str	r3, [r7, #12]

      break;
 8003012:	e000      	b.n	8003016 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003014:	bf00      	nop
  }

  return tmpreg;
 8003016:	68fb      	ldr	r3, [r7, #12]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a3a      	ldr	r2, [pc, #232]	@ (8003170 <TIM_Base_SetConfig+0xfc>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00f      	beq.n	80030ac <TIM_Base_SetConfig+0x38>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003092:	d00b      	beq.n	80030ac <TIM_Base_SetConfig+0x38>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a37      	ldr	r2, [pc, #220]	@ (8003174 <TIM_Base_SetConfig+0x100>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d007      	beq.n	80030ac <TIM_Base_SetConfig+0x38>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a36      	ldr	r2, [pc, #216]	@ (8003178 <TIM_Base_SetConfig+0x104>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d003      	beq.n	80030ac <TIM_Base_SetConfig+0x38>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a35      	ldr	r2, [pc, #212]	@ (800317c <TIM_Base_SetConfig+0x108>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d108      	bne.n	80030be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a2b      	ldr	r2, [pc, #172]	@ (8003170 <TIM_Base_SetConfig+0xfc>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d01b      	beq.n	80030fe <TIM_Base_SetConfig+0x8a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030cc:	d017      	beq.n	80030fe <TIM_Base_SetConfig+0x8a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a28      	ldr	r2, [pc, #160]	@ (8003174 <TIM_Base_SetConfig+0x100>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d013      	beq.n	80030fe <TIM_Base_SetConfig+0x8a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a27      	ldr	r2, [pc, #156]	@ (8003178 <TIM_Base_SetConfig+0x104>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00f      	beq.n	80030fe <TIM_Base_SetConfig+0x8a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a26      	ldr	r2, [pc, #152]	@ (800317c <TIM_Base_SetConfig+0x108>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00b      	beq.n	80030fe <TIM_Base_SetConfig+0x8a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a25      	ldr	r2, [pc, #148]	@ (8003180 <TIM_Base_SetConfig+0x10c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d007      	beq.n	80030fe <TIM_Base_SetConfig+0x8a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a24      	ldr	r2, [pc, #144]	@ (8003184 <TIM_Base_SetConfig+0x110>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d003      	beq.n	80030fe <TIM_Base_SetConfig+0x8a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a23      	ldr	r2, [pc, #140]	@ (8003188 <TIM_Base_SetConfig+0x114>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d108      	bne.n	8003110 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4313      	orrs	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	4313      	orrs	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a0e      	ldr	r2, [pc, #56]	@ (8003170 <TIM_Base_SetConfig+0xfc>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d103      	bne.n	8003144 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b01      	cmp	r3, #1
 8003154:	d105      	bne.n	8003162 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f023 0201 	bic.w	r2, r3, #1
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	611a      	str	r2, [r3, #16]
  }
}
 8003162:	bf00      	nop
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	40010000 	.word	0x40010000
 8003174:	40000400 	.word	0x40000400
 8003178:	40000800 	.word	0x40000800
 800317c:	40000c00 	.word	0x40000c00
 8003180:	40014000 	.word	0x40014000
 8003184:	40014400 	.word	0x40014400
 8003188:	40014800 	.word	0x40014800

0800318c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	f023 0201 	bic.w	r2, r3, #1
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4a24      	ldr	r2, [pc, #144]	@ (8003248 <TIM_TI1_SetConfig+0xbc>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d013      	beq.n	80031e2 <TIM_TI1_SetConfig+0x56>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031c0:	d00f      	beq.n	80031e2 <TIM_TI1_SetConfig+0x56>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4a21      	ldr	r2, [pc, #132]	@ (800324c <TIM_TI1_SetConfig+0xc0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d00b      	beq.n	80031e2 <TIM_TI1_SetConfig+0x56>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4a20      	ldr	r2, [pc, #128]	@ (8003250 <TIM_TI1_SetConfig+0xc4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d007      	beq.n	80031e2 <TIM_TI1_SetConfig+0x56>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003254 <TIM_TI1_SetConfig+0xc8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d003      	beq.n	80031e2 <TIM_TI1_SetConfig+0x56>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4a1e      	ldr	r2, [pc, #120]	@ (8003258 <TIM_TI1_SetConfig+0xcc>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d101      	bne.n	80031e6 <TIM_TI1_SetConfig+0x5a>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <TIM_TI1_SetConfig+0x5c>
 80031e6:	2300      	movs	r3, #0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d008      	beq.n	80031fe <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f023 0303 	bic.w	r3, r3, #3
 80031f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	e003      	b.n	8003206 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f043 0301 	orr.w	r3, r3, #1
 8003204:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800320c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	b2db      	uxtb	r3, r3
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f023 030a 	bic.w	r3, r3, #10
 8003220:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f003 030a 	and.w	r3, r3, #10
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	621a      	str	r2, [r3, #32]
}
 800323a:	bf00      	nop
 800323c:	371c      	adds	r7, #28
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40010000 	.word	0x40010000
 800324c:	40000400 	.word	0x40000400
 8003250:	40000800 	.word	0x40000800
 8003254:	40000c00 	.word	0x40000c00
 8003258:	40014000 	.word	0x40014000

0800325c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	f023 0201 	bic.w	r2, r3, #1
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003286:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f023 030a 	bic.w	r3, r3, #10
 8003298:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	4313      	orrs	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	621a      	str	r2, [r3, #32]
}
 80032ae:	bf00      	nop
 80032b0:	371c      	adds	r7, #28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b087      	sub	sp, #28
 80032be:	af00      	add	r7, sp, #0
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	607a      	str	r2, [r7, #4]
 80032c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	f023 0210 	bic.w	r2, r3, #16
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	021b      	lsls	r3, r3, #8
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80032f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	031b      	lsls	r3, r3, #12
 80032fe:	b29b      	uxth	r3, r3
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800330c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	4313      	orrs	r3, r2
 800331a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	621a      	str	r2, [r3, #32]
}
 8003328:	bf00      	nop
 800332a:	371c      	adds	r7, #28
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	f023 0210 	bic.w	r2, r3, #16
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800335e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	031b      	lsls	r3, r3, #12
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003370:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	621a      	str	r2, [r3, #32]
}
 8003388:	bf00      	nop
 800338a:	371c      	adds	r7, #28
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
 80033a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f023 0303 	bic.w	r3, r3, #3
 80033c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033d0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80033e4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	021b      	lsls	r3, r3, #8
 80033ea:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	621a      	str	r2, [r3, #32]
}
 8003400:	bf00      	nop
 8003402:	371c      	adds	r7, #28
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
 8003418:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003438:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	021b      	lsls	r3, r3, #8
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800344a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	031b      	lsls	r3, r3, #12
 8003450:	b29b      	uxth	r3, r3
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800345e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	031b      	lsls	r3, r3, #12
 8003464:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	4313      	orrs	r3, r2
 800346c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	621a      	str	r2, [r3, #32]
}
 800347a:	bf00      	nop
 800347c:	371c      	adds	r7, #28
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003486:	b480      	push	{r7}
 8003488:	b085      	sub	sp, #20
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800349c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f043 0307 	orr.w	r3, r3, #7
 80034a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	609a      	str	r2, [r3, #8]
}
 80034b0:	bf00      	nop
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
 80034c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	021a      	lsls	r2, r3, #8
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	431a      	orrs	r2, r3
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	609a      	str	r2, [r3, #8]
}
 80034f0:	bf00      	nop
 80034f2:	371c      	adds	r7, #28
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f003 031f 	and.w	r3, r3, #31
 800350e:	2201      	movs	r2, #1
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a1a      	ldr	r2, [r3, #32]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	43db      	mvns	r3, r3
 800351e:	401a      	ands	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a1a      	ldr	r2, [r3, #32]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	fa01 f303 	lsl.w	r3, r1, r3
 8003534:	431a      	orrs	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	621a      	str	r2, [r3, #32]
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
	...

08003548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800355c:	2302      	movs	r3, #2
 800355e:	e050      	b.n	8003602 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2202      	movs	r2, #2
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003586:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1c      	ldr	r2, [pc, #112]	@ (8003610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d018      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ac:	d013      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a18      	ldr	r2, [pc, #96]	@ (8003614 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d00e      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a16      	ldr	r2, [pc, #88]	@ (8003618 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d009      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a15      	ldr	r2, [pc, #84]	@ (800361c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d004      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a13      	ldr	r2, [pc, #76]	@ (8003620 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d10c      	bne.n	80035f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40010000 	.word	0x40010000
 8003614:	40000400 	.word	0x40000400
 8003618:	40000800 	.word	0x40000800
 800361c:	40000c00 	.word	0x40000c00
 8003620:	40014000 	.word	0x40014000

08003624 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e042      	b.n	80036e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fd ff02 	bl	800147c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2224      	movs	r2, #36	@ 0x24
 800367c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800368e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f9d1 	bl	8003a38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695a      	ldr	r2, [r3, #20]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08a      	sub	sp, #40	@ 0x28
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b20      	cmp	r3, #32
 800370a:	d175      	bne.n	80037f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <HAL_UART_Transmit+0x2c>
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e06e      	b.n	80037fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2221      	movs	r2, #33	@ 0x21
 8003726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800372a:	f7fe f88d 	bl	8001848 <HAL_GetTick>
 800372e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	88fa      	ldrh	r2, [r7, #6]
 8003734:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	88fa      	ldrh	r2, [r7, #6]
 800373a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003744:	d108      	bne.n	8003758 <HAL_UART_Transmit+0x6c>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d104      	bne.n	8003758 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	61bb      	str	r3, [r7, #24]
 8003756:	e003      	b.n	8003760 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800375c:	2300      	movs	r3, #0
 800375e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003760:	e02e      	b.n	80037c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2200      	movs	r2, #0
 800376a:	2180      	movs	r1, #128	@ 0x80
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f86d 	bl	800384c <UART_WaitOnFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e03a      	b.n	80037fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10b      	bne.n	80037a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003798:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	3302      	adds	r3, #2
 800379e:	61bb      	str	r3, [r7, #24]
 80037a0:	e007      	b.n	80037b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	781a      	ldrb	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	3301      	adds	r3, #1
 80037b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1cb      	bne.n	8003762 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2200      	movs	r2, #0
 80037d2:	2140      	movs	r1, #64	@ 0x40
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f839 	bl	800384c <UART_WaitOnFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e006      	b.n	80037fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	e000      	b.n	80037fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80037f8:	2302      	movs	r3, #2
  }
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3720      	adds	r7, #32
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b084      	sub	sp, #16
 8003806:	af00      	add	r7, sp, #0
 8003808:	60f8      	str	r0, [r7, #12]
 800380a:	60b9      	str	r1, [r7, #8]
 800380c:	4613      	mov	r3, r2
 800380e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b20      	cmp	r3, #32
 800381a:	d112      	bne.n	8003842 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <HAL_UART_Receive_IT+0x26>
 8003822:	88fb      	ldrh	r3, [r7, #6]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e00b      	b.n	8003844 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003832:	88fb      	ldrh	r3, [r7, #6]
 8003834:	461a      	mov	r2, r3
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f860 	bl	80038fe <UART_Start_Receive_IT>
 800383e:	4603      	mov	r3, r0
 8003840:	e000      	b.n	8003844 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003842:	2302      	movs	r3, #2
  }
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	603b      	str	r3, [r7, #0]
 8003858:	4613      	mov	r3, r2
 800385a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800385c:	e03b      	b.n	80038d6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003864:	d037      	beq.n	80038d6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003866:	f7fd ffef 	bl	8001848 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	6a3a      	ldr	r2, [r7, #32]
 8003872:	429a      	cmp	r2, r3
 8003874:	d302      	bcc.n	800387c <UART_WaitOnFlagUntilTimeout+0x30>
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e03a      	b.n	80038f6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b00      	cmp	r3, #0
 800388c:	d023      	beq.n	80038d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2b80      	cmp	r3, #128	@ 0x80
 8003892:	d020      	beq.n	80038d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2b40      	cmp	r3, #64	@ 0x40
 8003898:	d01d      	beq.n	80038d6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d116      	bne.n	80038d6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 f857 	bl	8003972 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2208      	movs	r2, #8
 80038c8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e00f      	b.n	80038f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	4013      	ands	r3, r2
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	bf0c      	ite	eq
 80038e6:	2301      	moveq	r3, #1
 80038e8:	2300      	movne	r3, #0
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	461a      	mov	r2, r3
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d0b4      	beq.n	800385e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038fe:	b480      	push	{r7}
 8003900:	b085      	sub	sp, #20
 8003902:	af00      	add	r7, sp, #0
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	4613      	mov	r3, r2
 800390a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	88fa      	ldrh	r2, [r7, #6]
 8003916:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	88fa      	ldrh	r2, [r7, #6]
 800391c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2222      	movs	r2, #34	@ 0x22
 8003928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d007      	beq.n	8003944 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003942:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695a      	ldr	r2, [r3, #20]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0220 	orr.w	r2, r2, #32
 8003962:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003972:	b480      	push	{r7}
 8003974:	b095      	sub	sp, #84	@ 0x54
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	330c      	adds	r3, #12
 8003980:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003984:	e853 3f00 	ldrex	r3, [r3]
 8003988:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800398a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003990:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	330c      	adds	r3, #12
 8003998:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800399a:	643a      	str	r2, [r7, #64]	@ 0x40
 800399c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039a2:	e841 2300 	strex	r3, r2, [r1]
 80039a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1e5      	bne.n	800397a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3314      	adds	r3, #20
 80039b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	e853 3f00 	ldrex	r3, [r3]
 80039bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f023 0301 	bic.w	r3, r3, #1
 80039c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	3314      	adds	r3, #20
 80039cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039d6:	e841 2300 	strex	r3, r2, [r1]
 80039da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1e5      	bne.n	80039ae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d119      	bne.n	8003a1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	330c      	adds	r3, #12
 80039f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	e853 3f00 	ldrex	r3, [r3]
 80039f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f023 0310 	bic.w	r3, r3, #16
 8003a00:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	330c      	adds	r3, #12
 8003a08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a0a:	61ba      	str	r2, [r7, #24]
 8003a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0e:	6979      	ldr	r1, [r7, #20]
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	e841 2300 	strex	r3, r2, [r1]
 8003a16:	613b      	str	r3, [r7, #16]
   return(result);
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1e5      	bne.n	80039ea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003a2c:	bf00      	nop
 8003a2e:	3754      	adds	r7, #84	@ 0x54
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a3c:	b0c0      	sub	sp, #256	@ 0x100
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a54:	68d9      	ldr	r1, [r3, #12]
 8003a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	ea40 0301 	orr.w	r3, r0, r1
 8003a60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a90:	f021 010c 	bic.w	r1, r1, #12
 8003a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a9e:	430b      	orrs	r3, r1
 8003aa0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab2:	6999      	ldr	r1, [r3, #24]
 8003ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	ea40 0301 	orr.w	r3, r0, r1
 8003abe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	4b8f      	ldr	r3, [pc, #572]	@ (8003d04 <UART_SetConfig+0x2cc>)
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d005      	beq.n	8003ad8 <UART_SetConfig+0xa0>
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4b8d      	ldr	r3, [pc, #564]	@ (8003d08 <UART_SetConfig+0x2d0>)
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d104      	bne.n	8003ae2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ad8:	f7fe fdda 	bl	8002690 <HAL_RCC_GetPCLK2Freq>
 8003adc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ae0:	e003      	b.n	8003aea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ae2:	f7fe fdc1 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8003ae6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003af4:	f040 810c 	bne.w	8003d10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003afc:	2200      	movs	r2, #0
 8003afe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b02:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003b0a:	4622      	mov	r2, r4
 8003b0c:	462b      	mov	r3, r5
 8003b0e:	1891      	adds	r1, r2, r2
 8003b10:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003b12:	415b      	adcs	r3, r3
 8003b14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	eb12 0801 	adds.w	r8, r2, r1
 8003b20:	4629      	mov	r1, r5
 8003b22:	eb43 0901 	adc.w	r9, r3, r1
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b3a:	4690      	mov	r8, r2
 8003b3c:	4699      	mov	r9, r3
 8003b3e:	4623      	mov	r3, r4
 8003b40:	eb18 0303 	adds.w	r3, r8, r3
 8003b44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b48:	462b      	mov	r3, r5
 8003b4a:	eb49 0303 	adc.w	r3, r9, r3
 8003b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b5e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b66:	460b      	mov	r3, r1
 8003b68:	18db      	adds	r3, r3, r3
 8003b6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	eb42 0303 	adc.w	r3, r2, r3
 8003b72:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b7c:	f7fc ff6e 	bl	8000a5c <__aeabi_uldivmod>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4b61      	ldr	r3, [pc, #388]	@ (8003d0c <UART_SetConfig+0x2d4>)
 8003b86:	fba3 2302 	umull	r2, r3, r3, r2
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	011c      	lsls	r4, r3, #4
 8003b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b92:	2200      	movs	r2, #0
 8003b94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b98:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ba0:	4642      	mov	r2, r8
 8003ba2:	464b      	mov	r3, r9
 8003ba4:	1891      	adds	r1, r2, r2
 8003ba6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ba8:	415b      	adcs	r3, r3
 8003baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003bb0:	4641      	mov	r1, r8
 8003bb2:	eb12 0a01 	adds.w	sl, r2, r1
 8003bb6:	4649      	mov	r1, r9
 8003bb8:	eb43 0b01 	adc.w	fp, r3, r1
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bd0:	4692      	mov	sl, r2
 8003bd2:	469b      	mov	fp, r3
 8003bd4:	4643      	mov	r3, r8
 8003bd6:	eb1a 0303 	adds.w	r3, sl, r3
 8003bda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bde:	464b      	mov	r3, r9
 8003be0:	eb4b 0303 	adc.w	r3, fp, r3
 8003be4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bf4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003bf8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	18db      	adds	r3, r3, r3
 8003c00:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c02:	4613      	mov	r3, r2
 8003c04:	eb42 0303 	adc.w	r3, r2, r3
 8003c08:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c12:	f7fc ff23 	bl	8000a5c <__aeabi_uldivmod>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d0c <UART_SetConfig+0x2d4>)
 8003c1e:	fba3 2301 	umull	r2, r3, r3, r1
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	2264      	movs	r2, #100	@ 0x64
 8003c26:	fb02 f303 	mul.w	r3, r2, r3
 8003c2a:	1acb      	subs	r3, r1, r3
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c32:	4b36      	ldr	r3, [pc, #216]	@ (8003d0c <UART_SetConfig+0x2d4>)
 8003c34:	fba3 2302 	umull	r2, r3, r3, r2
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c40:	441c      	add	r4, r3
 8003c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c46:	2200      	movs	r2, #0
 8003c48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c4c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c54:	4642      	mov	r2, r8
 8003c56:	464b      	mov	r3, r9
 8003c58:	1891      	adds	r1, r2, r2
 8003c5a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c5c:	415b      	adcs	r3, r3
 8003c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c64:	4641      	mov	r1, r8
 8003c66:	1851      	adds	r1, r2, r1
 8003c68:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c6a:	4649      	mov	r1, r9
 8003c6c:	414b      	adcs	r3, r1
 8003c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c7c:	4659      	mov	r1, fp
 8003c7e:	00cb      	lsls	r3, r1, #3
 8003c80:	4651      	mov	r1, sl
 8003c82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c86:	4651      	mov	r1, sl
 8003c88:	00ca      	lsls	r2, r1, #3
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4603      	mov	r3, r0
 8003c90:	4642      	mov	r2, r8
 8003c92:	189b      	adds	r3, r3, r2
 8003c94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c98:	464b      	mov	r3, r9
 8003c9a:	460a      	mov	r2, r1
 8003c9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003cb0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003cb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003cb8:	460b      	mov	r3, r1
 8003cba:	18db      	adds	r3, r3, r3
 8003cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	eb42 0303 	adc.w	r3, r2, r3
 8003cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003cce:	f7fc fec5 	bl	8000a5c <__aeabi_uldivmod>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d0c <UART_SetConfig+0x2d4>)
 8003cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	2164      	movs	r1, #100	@ 0x64
 8003ce0:	fb01 f303 	mul.w	r3, r1, r3
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	3332      	adds	r3, #50	@ 0x32
 8003cea:	4a08      	ldr	r2, [pc, #32]	@ (8003d0c <UART_SetConfig+0x2d4>)
 8003cec:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf0:	095b      	lsrs	r3, r3, #5
 8003cf2:	f003 0207 	and.w	r2, r3, #7
 8003cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4422      	add	r2, r4
 8003cfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d00:	e106      	b.n	8003f10 <UART_SetConfig+0x4d8>
 8003d02:	bf00      	nop
 8003d04:	40011000 	.word	0x40011000
 8003d08:	40011400 	.word	0x40011400
 8003d0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d14:	2200      	movs	r2, #0
 8003d16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d1a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d22:	4642      	mov	r2, r8
 8003d24:	464b      	mov	r3, r9
 8003d26:	1891      	adds	r1, r2, r2
 8003d28:	6239      	str	r1, [r7, #32]
 8003d2a:	415b      	adcs	r3, r3
 8003d2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d32:	4641      	mov	r1, r8
 8003d34:	1854      	adds	r4, r2, r1
 8003d36:	4649      	mov	r1, r9
 8003d38:	eb43 0501 	adc.w	r5, r3, r1
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	00eb      	lsls	r3, r5, #3
 8003d46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d4a:	00e2      	lsls	r2, r4, #3
 8003d4c:	4614      	mov	r4, r2
 8003d4e:	461d      	mov	r5, r3
 8003d50:	4643      	mov	r3, r8
 8003d52:	18e3      	adds	r3, r4, r3
 8003d54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d58:	464b      	mov	r3, r9
 8003d5a:	eb45 0303 	adc.w	r3, r5, r3
 8003d5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d6e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d7e:	4629      	mov	r1, r5
 8003d80:	008b      	lsls	r3, r1, #2
 8003d82:	4621      	mov	r1, r4
 8003d84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d88:	4621      	mov	r1, r4
 8003d8a:	008a      	lsls	r2, r1, #2
 8003d8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d90:	f7fc fe64 	bl	8000a5c <__aeabi_uldivmod>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4b60      	ldr	r3, [pc, #384]	@ (8003f1c <UART_SetConfig+0x4e4>)
 8003d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	011c      	lsls	r4, r3, #4
 8003da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003dac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003db0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003db4:	4642      	mov	r2, r8
 8003db6:	464b      	mov	r3, r9
 8003db8:	1891      	adds	r1, r2, r2
 8003dba:	61b9      	str	r1, [r7, #24]
 8003dbc:	415b      	adcs	r3, r3
 8003dbe:	61fb      	str	r3, [r7, #28]
 8003dc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dc4:	4641      	mov	r1, r8
 8003dc6:	1851      	adds	r1, r2, r1
 8003dc8:	6139      	str	r1, [r7, #16]
 8003dca:	4649      	mov	r1, r9
 8003dcc:	414b      	adcs	r3, r1
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ddc:	4659      	mov	r1, fp
 8003dde:	00cb      	lsls	r3, r1, #3
 8003de0:	4651      	mov	r1, sl
 8003de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003de6:	4651      	mov	r1, sl
 8003de8:	00ca      	lsls	r2, r1, #3
 8003dea:	4610      	mov	r0, r2
 8003dec:	4619      	mov	r1, r3
 8003dee:	4603      	mov	r3, r0
 8003df0:	4642      	mov	r2, r8
 8003df2:	189b      	adds	r3, r3, r2
 8003df4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003df8:	464b      	mov	r3, r9
 8003dfa:	460a      	mov	r2, r1
 8003dfc:	eb42 0303 	adc.w	r3, r2, r3
 8003e00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e0e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e1c:	4649      	mov	r1, r9
 8003e1e:	008b      	lsls	r3, r1, #2
 8003e20:	4641      	mov	r1, r8
 8003e22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e26:	4641      	mov	r1, r8
 8003e28:	008a      	lsls	r2, r1, #2
 8003e2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e2e:	f7fc fe15 	bl	8000a5c <__aeabi_uldivmod>
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	4611      	mov	r1, r2
 8003e38:	4b38      	ldr	r3, [pc, #224]	@ (8003f1c <UART_SetConfig+0x4e4>)
 8003e3a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	2264      	movs	r2, #100	@ 0x64
 8003e42:	fb02 f303 	mul.w	r3, r2, r3
 8003e46:	1acb      	subs	r3, r1, r3
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	3332      	adds	r3, #50	@ 0x32
 8003e4c:	4a33      	ldr	r2, [pc, #204]	@ (8003f1c <UART_SetConfig+0x4e4>)
 8003e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e58:	441c      	add	r4, r3
 8003e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e5e:	2200      	movs	r2, #0
 8003e60:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e62:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e64:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e68:	4642      	mov	r2, r8
 8003e6a:	464b      	mov	r3, r9
 8003e6c:	1891      	adds	r1, r2, r2
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	415b      	adcs	r3, r3
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e78:	4641      	mov	r1, r8
 8003e7a:	1851      	adds	r1, r2, r1
 8003e7c:	6039      	str	r1, [r7, #0]
 8003e7e:	4649      	mov	r1, r9
 8003e80:	414b      	adcs	r3, r1
 8003e82:	607b      	str	r3, [r7, #4]
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e90:	4659      	mov	r1, fp
 8003e92:	00cb      	lsls	r3, r1, #3
 8003e94:	4651      	mov	r1, sl
 8003e96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e9a:	4651      	mov	r1, sl
 8003e9c:	00ca      	lsls	r2, r1, #3
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	4642      	mov	r2, r8
 8003ea6:	189b      	adds	r3, r3, r2
 8003ea8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003eaa:	464b      	mov	r3, r9
 8003eac:	460a      	mov	r2, r1
 8003eae:	eb42 0303 	adc.w	r3, r2, r3
 8003eb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ebe:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ecc:	4649      	mov	r1, r9
 8003ece:	008b      	lsls	r3, r1, #2
 8003ed0:	4641      	mov	r1, r8
 8003ed2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ed6:	4641      	mov	r1, r8
 8003ed8:	008a      	lsls	r2, r1, #2
 8003eda:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003ede:	f7fc fdbd 	bl	8000a5c <__aeabi_uldivmod>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f1c <UART_SetConfig+0x4e4>)
 8003ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	2164      	movs	r1, #100	@ 0x64
 8003ef0:	fb01 f303 	mul.w	r3, r1, r3
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	3332      	adds	r3, #50	@ 0x32
 8003efa:	4a08      	ldr	r2, [pc, #32]	@ (8003f1c <UART_SetConfig+0x4e4>)
 8003efc:	fba2 2303 	umull	r2, r3, r2, r3
 8003f00:	095b      	lsrs	r3, r3, #5
 8003f02:	f003 020f 	and.w	r2, r3, #15
 8003f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4422      	add	r2, r4
 8003f0e:	609a      	str	r2, [r3, #8]
}
 8003f10:	bf00      	nop
 8003f12:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f16:	46bd      	mov	sp, r7
 8003f18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f1c:	51eb851f 	.word	0x51eb851f

08003f20 <std>:
 8003f20:	2300      	movs	r3, #0
 8003f22:	b510      	push	{r4, lr}
 8003f24:	4604      	mov	r4, r0
 8003f26:	e9c0 3300 	strd	r3, r3, [r0]
 8003f2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f2e:	6083      	str	r3, [r0, #8]
 8003f30:	8181      	strh	r1, [r0, #12]
 8003f32:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f34:	81c2      	strh	r2, [r0, #14]
 8003f36:	6183      	str	r3, [r0, #24]
 8003f38:	4619      	mov	r1, r3
 8003f3a:	2208      	movs	r2, #8
 8003f3c:	305c      	adds	r0, #92	@ 0x5c
 8003f3e:	f000 f906 	bl	800414e <memset>
 8003f42:	4b0d      	ldr	r3, [pc, #52]	@ (8003f78 <std+0x58>)
 8003f44:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f46:	4b0d      	ldr	r3, [pc, #52]	@ (8003f7c <std+0x5c>)
 8003f48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f80 <std+0x60>)
 8003f4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f84 <std+0x64>)
 8003f50:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f52:	4b0d      	ldr	r3, [pc, #52]	@ (8003f88 <std+0x68>)
 8003f54:	6224      	str	r4, [r4, #32]
 8003f56:	429c      	cmp	r4, r3
 8003f58:	d006      	beq.n	8003f68 <std+0x48>
 8003f5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f5e:	4294      	cmp	r4, r2
 8003f60:	d002      	beq.n	8003f68 <std+0x48>
 8003f62:	33d0      	adds	r3, #208	@ 0xd0
 8003f64:	429c      	cmp	r4, r3
 8003f66:	d105      	bne.n	8003f74 <std+0x54>
 8003f68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f70:	f000 b966 	b.w	8004240 <__retarget_lock_init_recursive>
 8003f74:	bd10      	pop	{r4, pc}
 8003f76:	bf00      	nop
 8003f78:	080040c9 	.word	0x080040c9
 8003f7c:	080040eb 	.word	0x080040eb
 8003f80:	08004123 	.word	0x08004123
 8003f84:	08004147 	.word	0x08004147
 8003f88:	20000190 	.word	0x20000190

08003f8c <stdio_exit_handler>:
 8003f8c:	4a02      	ldr	r2, [pc, #8]	@ (8003f98 <stdio_exit_handler+0xc>)
 8003f8e:	4903      	ldr	r1, [pc, #12]	@ (8003f9c <stdio_exit_handler+0x10>)
 8003f90:	4803      	ldr	r0, [pc, #12]	@ (8003fa0 <stdio_exit_handler+0x14>)
 8003f92:	f000 b869 	b.w	8004068 <_fwalk_sglue>
 8003f96:	bf00      	nop
 8003f98:	2000000c 	.word	0x2000000c
 8003f9c:	08004ae1 	.word	0x08004ae1
 8003fa0:	2000001c 	.word	0x2000001c

08003fa4 <cleanup_stdio>:
 8003fa4:	6841      	ldr	r1, [r0, #4]
 8003fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd8 <cleanup_stdio+0x34>)
 8003fa8:	4299      	cmp	r1, r3
 8003faa:	b510      	push	{r4, lr}
 8003fac:	4604      	mov	r4, r0
 8003fae:	d001      	beq.n	8003fb4 <cleanup_stdio+0x10>
 8003fb0:	f000 fd96 	bl	8004ae0 <_fflush_r>
 8003fb4:	68a1      	ldr	r1, [r4, #8]
 8003fb6:	4b09      	ldr	r3, [pc, #36]	@ (8003fdc <cleanup_stdio+0x38>)
 8003fb8:	4299      	cmp	r1, r3
 8003fba:	d002      	beq.n	8003fc2 <cleanup_stdio+0x1e>
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	f000 fd8f 	bl	8004ae0 <_fflush_r>
 8003fc2:	68e1      	ldr	r1, [r4, #12]
 8003fc4:	4b06      	ldr	r3, [pc, #24]	@ (8003fe0 <cleanup_stdio+0x3c>)
 8003fc6:	4299      	cmp	r1, r3
 8003fc8:	d004      	beq.n	8003fd4 <cleanup_stdio+0x30>
 8003fca:	4620      	mov	r0, r4
 8003fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fd0:	f000 bd86 	b.w	8004ae0 <_fflush_r>
 8003fd4:	bd10      	pop	{r4, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20000190 	.word	0x20000190
 8003fdc:	200001f8 	.word	0x200001f8
 8003fe0:	20000260 	.word	0x20000260

08003fe4 <global_stdio_init.part.0>:
 8003fe4:	b510      	push	{r4, lr}
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8004014 <global_stdio_init.part.0+0x30>)
 8003fe8:	4c0b      	ldr	r4, [pc, #44]	@ (8004018 <global_stdio_init.part.0+0x34>)
 8003fea:	4a0c      	ldr	r2, [pc, #48]	@ (800401c <global_stdio_init.part.0+0x38>)
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	4620      	mov	r0, r4
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2104      	movs	r1, #4
 8003ff4:	f7ff ff94 	bl	8003f20 <std>
 8003ff8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	2109      	movs	r1, #9
 8004000:	f7ff ff8e 	bl	8003f20 <std>
 8004004:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004008:	2202      	movs	r2, #2
 800400a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800400e:	2112      	movs	r1, #18
 8004010:	f7ff bf86 	b.w	8003f20 <std>
 8004014:	200002c8 	.word	0x200002c8
 8004018:	20000190 	.word	0x20000190
 800401c:	08003f8d 	.word	0x08003f8d

08004020 <__sfp_lock_acquire>:
 8004020:	4801      	ldr	r0, [pc, #4]	@ (8004028 <__sfp_lock_acquire+0x8>)
 8004022:	f000 b90e 	b.w	8004242 <__retarget_lock_acquire_recursive>
 8004026:	bf00      	nop
 8004028:	200002d1 	.word	0x200002d1

0800402c <__sfp_lock_release>:
 800402c:	4801      	ldr	r0, [pc, #4]	@ (8004034 <__sfp_lock_release+0x8>)
 800402e:	f000 b909 	b.w	8004244 <__retarget_lock_release_recursive>
 8004032:	bf00      	nop
 8004034:	200002d1 	.word	0x200002d1

08004038 <__sinit>:
 8004038:	b510      	push	{r4, lr}
 800403a:	4604      	mov	r4, r0
 800403c:	f7ff fff0 	bl	8004020 <__sfp_lock_acquire>
 8004040:	6a23      	ldr	r3, [r4, #32]
 8004042:	b11b      	cbz	r3, 800404c <__sinit+0x14>
 8004044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004048:	f7ff bff0 	b.w	800402c <__sfp_lock_release>
 800404c:	4b04      	ldr	r3, [pc, #16]	@ (8004060 <__sinit+0x28>)
 800404e:	6223      	str	r3, [r4, #32]
 8004050:	4b04      	ldr	r3, [pc, #16]	@ (8004064 <__sinit+0x2c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1f5      	bne.n	8004044 <__sinit+0xc>
 8004058:	f7ff ffc4 	bl	8003fe4 <global_stdio_init.part.0>
 800405c:	e7f2      	b.n	8004044 <__sinit+0xc>
 800405e:	bf00      	nop
 8004060:	08003fa5 	.word	0x08003fa5
 8004064:	200002c8 	.word	0x200002c8

08004068 <_fwalk_sglue>:
 8004068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800406c:	4607      	mov	r7, r0
 800406e:	4688      	mov	r8, r1
 8004070:	4614      	mov	r4, r2
 8004072:	2600      	movs	r6, #0
 8004074:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004078:	f1b9 0901 	subs.w	r9, r9, #1
 800407c:	d505      	bpl.n	800408a <_fwalk_sglue+0x22>
 800407e:	6824      	ldr	r4, [r4, #0]
 8004080:	2c00      	cmp	r4, #0
 8004082:	d1f7      	bne.n	8004074 <_fwalk_sglue+0xc>
 8004084:	4630      	mov	r0, r6
 8004086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800408a:	89ab      	ldrh	r3, [r5, #12]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d907      	bls.n	80040a0 <_fwalk_sglue+0x38>
 8004090:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004094:	3301      	adds	r3, #1
 8004096:	d003      	beq.n	80040a0 <_fwalk_sglue+0x38>
 8004098:	4629      	mov	r1, r5
 800409a:	4638      	mov	r0, r7
 800409c:	47c0      	blx	r8
 800409e:	4306      	orrs	r6, r0
 80040a0:	3568      	adds	r5, #104	@ 0x68
 80040a2:	e7e9      	b.n	8004078 <_fwalk_sglue+0x10>

080040a4 <iprintf>:
 80040a4:	b40f      	push	{r0, r1, r2, r3}
 80040a6:	b507      	push	{r0, r1, r2, lr}
 80040a8:	4906      	ldr	r1, [pc, #24]	@ (80040c4 <iprintf+0x20>)
 80040aa:	ab04      	add	r3, sp, #16
 80040ac:	6808      	ldr	r0, [r1, #0]
 80040ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80040b2:	6881      	ldr	r1, [r0, #8]
 80040b4:	9301      	str	r3, [sp, #4]
 80040b6:	f000 f9e9 	bl	800448c <_vfiprintf_r>
 80040ba:	b003      	add	sp, #12
 80040bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80040c0:	b004      	add	sp, #16
 80040c2:	4770      	bx	lr
 80040c4:	20000018 	.word	0x20000018

080040c8 <__sread>:
 80040c8:	b510      	push	{r4, lr}
 80040ca:	460c      	mov	r4, r1
 80040cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040d0:	f000 f868 	bl	80041a4 <_read_r>
 80040d4:	2800      	cmp	r0, #0
 80040d6:	bfab      	itete	ge
 80040d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80040da:	89a3      	ldrhlt	r3, [r4, #12]
 80040dc:	181b      	addge	r3, r3, r0
 80040de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80040e2:	bfac      	ite	ge
 80040e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80040e6:	81a3      	strhlt	r3, [r4, #12]
 80040e8:	bd10      	pop	{r4, pc}

080040ea <__swrite>:
 80040ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040ee:	461f      	mov	r7, r3
 80040f0:	898b      	ldrh	r3, [r1, #12]
 80040f2:	05db      	lsls	r3, r3, #23
 80040f4:	4605      	mov	r5, r0
 80040f6:	460c      	mov	r4, r1
 80040f8:	4616      	mov	r6, r2
 80040fa:	d505      	bpl.n	8004108 <__swrite+0x1e>
 80040fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004100:	2302      	movs	r3, #2
 8004102:	2200      	movs	r2, #0
 8004104:	f000 f83c 	bl	8004180 <_lseek_r>
 8004108:	89a3      	ldrh	r3, [r4, #12]
 800410a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800410e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004112:	81a3      	strh	r3, [r4, #12]
 8004114:	4632      	mov	r2, r6
 8004116:	463b      	mov	r3, r7
 8004118:	4628      	mov	r0, r5
 800411a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800411e:	f000 b853 	b.w	80041c8 <_write_r>

08004122 <__sseek>:
 8004122:	b510      	push	{r4, lr}
 8004124:	460c      	mov	r4, r1
 8004126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800412a:	f000 f829 	bl	8004180 <_lseek_r>
 800412e:	1c43      	adds	r3, r0, #1
 8004130:	89a3      	ldrh	r3, [r4, #12]
 8004132:	bf15      	itete	ne
 8004134:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004136:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800413a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800413e:	81a3      	strheq	r3, [r4, #12]
 8004140:	bf18      	it	ne
 8004142:	81a3      	strhne	r3, [r4, #12]
 8004144:	bd10      	pop	{r4, pc}

08004146 <__sclose>:
 8004146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800414a:	f000 b809 	b.w	8004160 <_close_r>

0800414e <memset>:
 800414e:	4402      	add	r2, r0
 8004150:	4603      	mov	r3, r0
 8004152:	4293      	cmp	r3, r2
 8004154:	d100      	bne.n	8004158 <memset+0xa>
 8004156:	4770      	bx	lr
 8004158:	f803 1b01 	strb.w	r1, [r3], #1
 800415c:	e7f9      	b.n	8004152 <memset+0x4>
	...

08004160 <_close_r>:
 8004160:	b538      	push	{r3, r4, r5, lr}
 8004162:	4d06      	ldr	r5, [pc, #24]	@ (800417c <_close_r+0x1c>)
 8004164:	2300      	movs	r3, #0
 8004166:	4604      	mov	r4, r0
 8004168:	4608      	mov	r0, r1
 800416a:	602b      	str	r3, [r5, #0]
 800416c:	f7fd fa27 	bl	80015be <_close>
 8004170:	1c43      	adds	r3, r0, #1
 8004172:	d102      	bne.n	800417a <_close_r+0x1a>
 8004174:	682b      	ldr	r3, [r5, #0]
 8004176:	b103      	cbz	r3, 800417a <_close_r+0x1a>
 8004178:	6023      	str	r3, [r4, #0]
 800417a:	bd38      	pop	{r3, r4, r5, pc}
 800417c:	200002cc 	.word	0x200002cc

08004180 <_lseek_r>:
 8004180:	b538      	push	{r3, r4, r5, lr}
 8004182:	4d07      	ldr	r5, [pc, #28]	@ (80041a0 <_lseek_r+0x20>)
 8004184:	4604      	mov	r4, r0
 8004186:	4608      	mov	r0, r1
 8004188:	4611      	mov	r1, r2
 800418a:	2200      	movs	r2, #0
 800418c:	602a      	str	r2, [r5, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	f7fd fa3c 	bl	800160c <_lseek>
 8004194:	1c43      	adds	r3, r0, #1
 8004196:	d102      	bne.n	800419e <_lseek_r+0x1e>
 8004198:	682b      	ldr	r3, [r5, #0]
 800419a:	b103      	cbz	r3, 800419e <_lseek_r+0x1e>
 800419c:	6023      	str	r3, [r4, #0]
 800419e:	bd38      	pop	{r3, r4, r5, pc}
 80041a0:	200002cc 	.word	0x200002cc

080041a4 <_read_r>:
 80041a4:	b538      	push	{r3, r4, r5, lr}
 80041a6:	4d07      	ldr	r5, [pc, #28]	@ (80041c4 <_read_r+0x20>)
 80041a8:	4604      	mov	r4, r0
 80041aa:	4608      	mov	r0, r1
 80041ac:	4611      	mov	r1, r2
 80041ae:	2200      	movs	r2, #0
 80041b0:	602a      	str	r2, [r5, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	f7fd f9e6 	bl	8001584 <_read>
 80041b8:	1c43      	adds	r3, r0, #1
 80041ba:	d102      	bne.n	80041c2 <_read_r+0x1e>
 80041bc:	682b      	ldr	r3, [r5, #0]
 80041be:	b103      	cbz	r3, 80041c2 <_read_r+0x1e>
 80041c0:	6023      	str	r3, [r4, #0]
 80041c2:	bd38      	pop	{r3, r4, r5, pc}
 80041c4:	200002cc 	.word	0x200002cc

080041c8 <_write_r>:
 80041c8:	b538      	push	{r3, r4, r5, lr}
 80041ca:	4d07      	ldr	r5, [pc, #28]	@ (80041e8 <_write_r+0x20>)
 80041cc:	4604      	mov	r4, r0
 80041ce:	4608      	mov	r0, r1
 80041d0:	4611      	mov	r1, r2
 80041d2:	2200      	movs	r2, #0
 80041d4:	602a      	str	r2, [r5, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	f7fd fa6e 	bl	80016b8 <_write>
 80041dc:	1c43      	adds	r3, r0, #1
 80041de:	d102      	bne.n	80041e6 <_write_r+0x1e>
 80041e0:	682b      	ldr	r3, [r5, #0]
 80041e2:	b103      	cbz	r3, 80041e6 <_write_r+0x1e>
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	bd38      	pop	{r3, r4, r5, pc}
 80041e8:	200002cc 	.word	0x200002cc

080041ec <__errno>:
 80041ec:	4b01      	ldr	r3, [pc, #4]	@ (80041f4 <__errno+0x8>)
 80041ee:	6818      	ldr	r0, [r3, #0]
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	20000018 	.word	0x20000018

080041f8 <__libc_init_array>:
 80041f8:	b570      	push	{r4, r5, r6, lr}
 80041fa:	4d0d      	ldr	r5, [pc, #52]	@ (8004230 <__libc_init_array+0x38>)
 80041fc:	4c0d      	ldr	r4, [pc, #52]	@ (8004234 <__libc_init_array+0x3c>)
 80041fe:	1b64      	subs	r4, r4, r5
 8004200:	10a4      	asrs	r4, r4, #2
 8004202:	2600      	movs	r6, #0
 8004204:	42a6      	cmp	r6, r4
 8004206:	d109      	bne.n	800421c <__libc_init_array+0x24>
 8004208:	4d0b      	ldr	r5, [pc, #44]	@ (8004238 <__libc_init_array+0x40>)
 800420a:	4c0c      	ldr	r4, [pc, #48]	@ (800423c <__libc_init_array+0x44>)
 800420c:	f000 fdb8 	bl	8004d80 <_init>
 8004210:	1b64      	subs	r4, r4, r5
 8004212:	10a4      	asrs	r4, r4, #2
 8004214:	2600      	movs	r6, #0
 8004216:	42a6      	cmp	r6, r4
 8004218:	d105      	bne.n	8004226 <__libc_init_array+0x2e>
 800421a:	bd70      	pop	{r4, r5, r6, pc}
 800421c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004220:	4798      	blx	r3
 8004222:	3601      	adds	r6, #1
 8004224:	e7ee      	b.n	8004204 <__libc_init_array+0xc>
 8004226:	f855 3b04 	ldr.w	r3, [r5], #4
 800422a:	4798      	blx	r3
 800422c:	3601      	adds	r6, #1
 800422e:	e7f2      	b.n	8004216 <__libc_init_array+0x1e>
 8004230:	08004dfc 	.word	0x08004dfc
 8004234:	08004dfc 	.word	0x08004dfc
 8004238:	08004dfc 	.word	0x08004dfc
 800423c:	08004e00 	.word	0x08004e00

08004240 <__retarget_lock_init_recursive>:
 8004240:	4770      	bx	lr

08004242 <__retarget_lock_acquire_recursive>:
 8004242:	4770      	bx	lr

08004244 <__retarget_lock_release_recursive>:
 8004244:	4770      	bx	lr
	...

08004248 <_free_r>:
 8004248:	b538      	push	{r3, r4, r5, lr}
 800424a:	4605      	mov	r5, r0
 800424c:	2900      	cmp	r1, #0
 800424e:	d041      	beq.n	80042d4 <_free_r+0x8c>
 8004250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004254:	1f0c      	subs	r4, r1, #4
 8004256:	2b00      	cmp	r3, #0
 8004258:	bfb8      	it	lt
 800425a:	18e4      	addlt	r4, r4, r3
 800425c:	f000 f8e0 	bl	8004420 <__malloc_lock>
 8004260:	4a1d      	ldr	r2, [pc, #116]	@ (80042d8 <_free_r+0x90>)
 8004262:	6813      	ldr	r3, [r2, #0]
 8004264:	b933      	cbnz	r3, 8004274 <_free_r+0x2c>
 8004266:	6063      	str	r3, [r4, #4]
 8004268:	6014      	str	r4, [r2, #0]
 800426a:	4628      	mov	r0, r5
 800426c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004270:	f000 b8dc 	b.w	800442c <__malloc_unlock>
 8004274:	42a3      	cmp	r3, r4
 8004276:	d908      	bls.n	800428a <_free_r+0x42>
 8004278:	6820      	ldr	r0, [r4, #0]
 800427a:	1821      	adds	r1, r4, r0
 800427c:	428b      	cmp	r3, r1
 800427e:	bf01      	itttt	eq
 8004280:	6819      	ldreq	r1, [r3, #0]
 8004282:	685b      	ldreq	r3, [r3, #4]
 8004284:	1809      	addeq	r1, r1, r0
 8004286:	6021      	streq	r1, [r4, #0]
 8004288:	e7ed      	b.n	8004266 <_free_r+0x1e>
 800428a:	461a      	mov	r2, r3
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	b10b      	cbz	r3, 8004294 <_free_r+0x4c>
 8004290:	42a3      	cmp	r3, r4
 8004292:	d9fa      	bls.n	800428a <_free_r+0x42>
 8004294:	6811      	ldr	r1, [r2, #0]
 8004296:	1850      	adds	r0, r2, r1
 8004298:	42a0      	cmp	r0, r4
 800429a:	d10b      	bne.n	80042b4 <_free_r+0x6c>
 800429c:	6820      	ldr	r0, [r4, #0]
 800429e:	4401      	add	r1, r0
 80042a0:	1850      	adds	r0, r2, r1
 80042a2:	4283      	cmp	r3, r0
 80042a4:	6011      	str	r1, [r2, #0]
 80042a6:	d1e0      	bne.n	800426a <_free_r+0x22>
 80042a8:	6818      	ldr	r0, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	6053      	str	r3, [r2, #4]
 80042ae:	4408      	add	r0, r1
 80042b0:	6010      	str	r0, [r2, #0]
 80042b2:	e7da      	b.n	800426a <_free_r+0x22>
 80042b4:	d902      	bls.n	80042bc <_free_r+0x74>
 80042b6:	230c      	movs	r3, #12
 80042b8:	602b      	str	r3, [r5, #0]
 80042ba:	e7d6      	b.n	800426a <_free_r+0x22>
 80042bc:	6820      	ldr	r0, [r4, #0]
 80042be:	1821      	adds	r1, r4, r0
 80042c0:	428b      	cmp	r3, r1
 80042c2:	bf04      	itt	eq
 80042c4:	6819      	ldreq	r1, [r3, #0]
 80042c6:	685b      	ldreq	r3, [r3, #4]
 80042c8:	6063      	str	r3, [r4, #4]
 80042ca:	bf04      	itt	eq
 80042cc:	1809      	addeq	r1, r1, r0
 80042ce:	6021      	streq	r1, [r4, #0]
 80042d0:	6054      	str	r4, [r2, #4]
 80042d2:	e7ca      	b.n	800426a <_free_r+0x22>
 80042d4:	bd38      	pop	{r3, r4, r5, pc}
 80042d6:	bf00      	nop
 80042d8:	200002d8 	.word	0x200002d8

080042dc <sbrk_aligned>:
 80042dc:	b570      	push	{r4, r5, r6, lr}
 80042de:	4e0f      	ldr	r6, [pc, #60]	@ (800431c <sbrk_aligned+0x40>)
 80042e0:	460c      	mov	r4, r1
 80042e2:	6831      	ldr	r1, [r6, #0]
 80042e4:	4605      	mov	r5, r0
 80042e6:	b911      	cbnz	r1, 80042ee <sbrk_aligned+0x12>
 80042e8:	f000 fcb6 	bl	8004c58 <_sbrk_r>
 80042ec:	6030      	str	r0, [r6, #0]
 80042ee:	4621      	mov	r1, r4
 80042f0:	4628      	mov	r0, r5
 80042f2:	f000 fcb1 	bl	8004c58 <_sbrk_r>
 80042f6:	1c43      	adds	r3, r0, #1
 80042f8:	d103      	bne.n	8004302 <sbrk_aligned+0x26>
 80042fa:	f04f 34ff 	mov.w	r4, #4294967295
 80042fe:	4620      	mov	r0, r4
 8004300:	bd70      	pop	{r4, r5, r6, pc}
 8004302:	1cc4      	adds	r4, r0, #3
 8004304:	f024 0403 	bic.w	r4, r4, #3
 8004308:	42a0      	cmp	r0, r4
 800430a:	d0f8      	beq.n	80042fe <sbrk_aligned+0x22>
 800430c:	1a21      	subs	r1, r4, r0
 800430e:	4628      	mov	r0, r5
 8004310:	f000 fca2 	bl	8004c58 <_sbrk_r>
 8004314:	3001      	adds	r0, #1
 8004316:	d1f2      	bne.n	80042fe <sbrk_aligned+0x22>
 8004318:	e7ef      	b.n	80042fa <sbrk_aligned+0x1e>
 800431a:	bf00      	nop
 800431c:	200002d4 	.word	0x200002d4

08004320 <_malloc_r>:
 8004320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004324:	1ccd      	adds	r5, r1, #3
 8004326:	f025 0503 	bic.w	r5, r5, #3
 800432a:	3508      	adds	r5, #8
 800432c:	2d0c      	cmp	r5, #12
 800432e:	bf38      	it	cc
 8004330:	250c      	movcc	r5, #12
 8004332:	2d00      	cmp	r5, #0
 8004334:	4606      	mov	r6, r0
 8004336:	db01      	blt.n	800433c <_malloc_r+0x1c>
 8004338:	42a9      	cmp	r1, r5
 800433a:	d904      	bls.n	8004346 <_malloc_r+0x26>
 800433c:	230c      	movs	r3, #12
 800433e:	6033      	str	r3, [r6, #0]
 8004340:	2000      	movs	r0, #0
 8004342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004346:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800441c <_malloc_r+0xfc>
 800434a:	f000 f869 	bl	8004420 <__malloc_lock>
 800434e:	f8d8 3000 	ldr.w	r3, [r8]
 8004352:	461c      	mov	r4, r3
 8004354:	bb44      	cbnz	r4, 80043a8 <_malloc_r+0x88>
 8004356:	4629      	mov	r1, r5
 8004358:	4630      	mov	r0, r6
 800435a:	f7ff ffbf 	bl	80042dc <sbrk_aligned>
 800435e:	1c43      	adds	r3, r0, #1
 8004360:	4604      	mov	r4, r0
 8004362:	d158      	bne.n	8004416 <_malloc_r+0xf6>
 8004364:	f8d8 4000 	ldr.w	r4, [r8]
 8004368:	4627      	mov	r7, r4
 800436a:	2f00      	cmp	r7, #0
 800436c:	d143      	bne.n	80043f6 <_malloc_r+0xd6>
 800436e:	2c00      	cmp	r4, #0
 8004370:	d04b      	beq.n	800440a <_malloc_r+0xea>
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	4639      	mov	r1, r7
 8004376:	4630      	mov	r0, r6
 8004378:	eb04 0903 	add.w	r9, r4, r3
 800437c:	f000 fc6c 	bl	8004c58 <_sbrk_r>
 8004380:	4581      	cmp	r9, r0
 8004382:	d142      	bne.n	800440a <_malloc_r+0xea>
 8004384:	6821      	ldr	r1, [r4, #0]
 8004386:	1a6d      	subs	r5, r5, r1
 8004388:	4629      	mov	r1, r5
 800438a:	4630      	mov	r0, r6
 800438c:	f7ff ffa6 	bl	80042dc <sbrk_aligned>
 8004390:	3001      	adds	r0, #1
 8004392:	d03a      	beq.n	800440a <_malloc_r+0xea>
 8004394:	6823      	ldr	r3, [r4, #0]
 8004396:	442b      	add	r3, r5
 8004398:	6023      	str	r3, [r4, #0]
 800439a:	f8d8 3000 	ldr.w	r3, [r8]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	bb62      	cbnz	r2, 80043fc <_malloc_r+0xdc>
 80043a2:	f8c8 7000 	str.w	r7, [r8]
 80043a6:	e00f      	b.n	80043c8 <_malloc_r+0xa8>
 80043a8:	6822      	ldr	r2, [r4, #0]
 80043aa:	1b52      	subs	r2, r2, r5
 80043ac:	d420      	bmi.n	80043f0 <_malloc_r+0xd0>
 80043ae:	2a0b      	cmp	r2, #11
 80043b0:	d917      	bls.n	80043e2 <_malloc_r+0xc2>
 80043b2:	1961      	adds	r1, r4, r5
 80043b4:	42a3      	cmp	r3, r4
 80043b6:	6025      	str	r5, [r4, #0]
 80043b8:	bf18      	it	ne
 80043ba:	6059      	strne	r1, [r3, #4]
 80043bc:	6863      	ldr	r3, [r4, #4]
 80043be:	bf08      	it	eq
 80043c0:	f8c8 1000 	streq.w	r1, [r8]
 80043c4:	5162      	str	r2, [r4, r5]
 80043c6:	604b      	str	r3, [r1, #4]
 80043c8:	4630      	mov	r0, r6
 80043ca:	f000 f82f 	bl	800442c <__malloc_unlock>
 80043ce:	f104 000b 	add.w	r0, r4, #11
 80043d2:	1d23      	adds	r3, r4, #4
 80043d4:	f020 0007 	bic.w	r0, r0, #7
 80043d8:	1ac2      	subs	r2, r0, r3
 80043da:	bf1c      	itt	ne
 80043dc:	1a1b      	subne	r3, r3, r0
 80043de:	50a3      	strne	r3, [r4, r2]
 80043e0:	e7af      	b.n	8004342 <_malloc_r+0x22>
 80043e2:	6862      	ldr	r2, [r4, #4]
 80043e4:	42a3      	cmp	r3, r4
 80043e6:	bf0c      	ite	eq
 80043e8:	f8c8 2000 	streq.w	r2, [r8]
 80043ec:	605a      	strne	r2, [r3, #4]
 80043ee:	e7eb      	b.n	80043c8 <_malloc_r+0xa8>
 80043f0:	4623      	mov	r3, r4
 80043f2:	6864      	ldr	r4, [r4, #4]
 80043f4:	e7ae      	b.n	8004354 <_malloc_r+0x34>
 80043f6:	463c      	mov	r4, r7
 80043f8:	687f      	ldr	r7, [r7, #4]
 80043fa:	e7b6      	b.n	800436a <_malloc_r+0x4a>
 80043fc:	461a      	mov	r2, r3
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	42a3      	cmp	r3, r4
 8004402:	d1fb      	bne.n	80043fc <_malloc_r+0xdc>
 8004404:	2300      	movs	r3, #0
 8004406:	6053      	str	r3, [r2, #4]
 8004408:	e7de      	b.n	80043c8 <_malloc_r+0xa8>
 800440a:	230c      	movs	r3, #12
 800440c:	6033      	str	r3, [r6, #0]
 800440e:	4630      	mov	r0, r6
 8004410:	f000 f80c 	bl	800442c <__malloc_unlock>
 8004414:	e794      	b.n	8004340 <_malloc_r+0x20>
 8004416:	6005      	str	r5, [r0, #0]
 8004418:	e7d6      	b.n	80043c8 <_malloc_r+0xa8>
 800441a:	bf00      	nop
 800441c:	200002d8 	.word	0x200002d8

08004420 <__malloc_lock>:
 8004420:	4801      	ldr	r0, [pc, #4]	@ (8004428 <__malloc_lock+0x8>)
 8004422:	f7ff bf0e 	b.w	8004242 <__retarget_lock_acquire_recursive>
 8004426:	bf00      	nop
 8004428:	200002d0 	.word	0x200002d0

0800442c <__malloc_unlock>:
 800442c:	4801      	ldr	r0, [pc, #4]	@ (8004434 <__malloc_unlock+0x8>)
 800442e:	f7ff bf09 	b.w	8004244 <__retarget_lock_release_recursive>
 8004432:	bf00      	nop
 8004434:	200002d0 	.word	0x200002d0

08004438 <__sfputc_r>:
 8004438:	6893      	ldr	r3, [r2, #8]
 800443a:	3b01      	subs	r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	b410      	push	{r4}
 8004440:	6093      	str	r3, [r2, #8]
 8004442:	da08      	bge.n	8004456 <__sfputc_r+0x1e>
 8004444:	6994      	ldr	r4, [r2, #24]
 8004446:	42a3      	cmp	r3, r4
 8004448:	db01      	blt.n	800444e <__sfputc_r+0x16>
 800444a:	290a      	cmp	r1, #10
 800444c:	d103      	bne.n	8004456 <__sfputc_r+0x1e>
 800444e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004452:	f000 bb6d 	b.w	8004b30 <__swbuf_r>
 8004456:	6813      	ldr	r3, [r2, #0]
 8004458:	1c58      	adds	r0, r3, #1
 800445a:	6010      	str	r0, [r2, #0]
 800445c:	7019      	strb	r1, [r3, #0]
 800445e:	4608      	mov	r0, r1
 8004460:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004464:	4770      	bx	lr

08004466 <__sfputs_r>:
 8004466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004468:	4606      	mov	r6, r0
 800446a:	460f      	mov	r7, r1
 800446c:	4614      	mov	r4, r2
 800446e:	18d5      	adds	r5, r2, r3
 8004470:	42ac      	cmp	r4, r5
 8004472:	d101      	bne.n	8004478 <__sfputs_r+0x12>
 8004474:	2000      	movs	r0, #0
 8004476:	e007      	b.n	8004488 <__sfputs_r+0x22>
 8004478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800447c:	463a      	mov	r2, r7
 800447e:	4630      	mov	r0, r6
 8004480:	f7ff ffda 	bl	8004438 <__sfputc_r>
 8004484:	1c43      	adds	r3, r0, #1
 8004486:	d1f3      	bne.n	8004470 <__sfputs_r+0xa>
 8004488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800448c <_vfiprintf_r>:
 800448c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004490:	460d      	mov	r5, r1
 8004492:	b09d      	sub	sp, #116	@ 0x74
 8004494:	4614      	mov	r4, r2
 8004496:	4698      	mov	r8, r3
 8004498:	4606      	mov	r6, r0
 800449a:	b118      	cbz	r0, 80044a4 <_vfiprintf_r+0x18>
 800449c:	6a03      	ldr	r3, [r0, #32]
 800449e:	b90b      	cbnz	r3, 80044a4 <_vfiprintf_r+0x18>
 80044a0:	f7ff fdca 	bl	8004038 <__sinit>
 80044a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044a6:	07d9      	lsls	r1, r3, #31
 80044a8:	d405      	bmi.n	80044b6 <_vfiprintf_r+0x2a>
 80044aa:	89ab      	ldrh	r3, [r5, #12]
 80044ac:	059a      	lsls	r2, r3, #22
 80044ae:	d402      	bmi.n	80044b6 <_vfiprintf_r+0x2a>
 80044b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044b2:	f7ff fec6 	bl	8004242 <__retarget_lock_acquire_recursive>
 80044b6:	89ab      	ldrh	r3, [r5, #12]
 80044b8:	071b      	lsls	r3, r3, #28
 80044ba:	d501      	bpl.n	80044c0 <_vfiprintf_r+0x34>
 80044bc:	692b      	ldr	r3, [r5, #16]
 80044be:	b99b      	cbnz	r3, 80044e8 <_vfiprintf_r+0x5c>
 80044c0:	4629      	mov	r1, r5
 80044c2:	4630      	mov	r0, r6
 80044c4:	f000 fb72 	bl	8004bac <__swsetup_r>
 80044c8:	b170      	cbz	r0, 80044e8 <_vfiprintf_r+0x5c>
 80044ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044cc:	07dc      	lsls	r4, r3, #31
 80044ce:	d504      	bpl.n	80044da <_vfiprintf_r+0x4e>
 80044d0:	f04f 30ff 	mov.w	r0, #4294967295
 80044d4:	b01d      	add	sp, #116	@ 0x74
 80044d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044da:	89ab      	ldrh	r3, [r5, #12]
 80044dc:	0598      	lsls	r0, r3, #22
 80044de:	d4f7      	bmi.n	80044d0 <_vfiprintf_r+0x44>
 80044e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044e2:	f7ff feaf 	bl	8004244 <__retarget_lock_release_recursive>
 80044e6:	e7f3      	b.n	80044d0 <_vfiprintf_r+0x44>
 80044e8:	2300      	movs	r3, #0
 80044ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80044ec:	2320      	movs	r3, #32
 80044ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80044f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80044f6:	2330      	movs	r3, #48	@ 0x30
 80044f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80046a8 <_vfiprintf_r+0x21c>
 80044fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004500:	f04f 0901 	mov.w	r9, #1
 8004504:	4623      	mov	r3, r4
 8004506:	469a      	mov	sl, r3
 8004508:	f813 2b01 	ldrb.w	r2, [r3], #1
 800450c:	b10a      	cbz	r2, 8004512 <_vfiprintf_r+0x86>
 800450e:	2a25      	cmp	r2, #37	@ 0x25
 8004510:	d1f9      	bne.n	8004506 <_vfiprintf_r+0x7a>
 8004512:	ebba 0b04 	subs.w	fp, sl, r4
 8004516:	d00b      	beq.n	8004530 <_vfiprintf_r+0xa4>
 8004518:	465b      	mov	r3, fp
 800451a:	4622      	mov	r2, r4
 800451c:	4629      	mov	r1, r5
 800451e:	4630      	mov	r0, r6
 8004520:	f7ff ffa1 	bl	8004466 <__sfputs_r>
 8004524:	3001      	adds	r0, #1
 8004526:	f000 80a7 	beq.w	8004678 <_vfiprintf_r+0x1ec>
 800452a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800452c:	445a      	add	r2, fp
 800452e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004530:	f89a 3000 	ldrb.w	r3, [sl]
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 809f 	beq.w	8004678 <_vfiprintf_r+0x1ec>
 800453a:	2300      	movs	r3, #0
 800453c:	f04f 32ff 	mov.w	r2, #4294967295
 8004540:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004544:	f10a 0a01 	add.w	sl, sl, #1
 8004548:	9304      	str	r3, [sp, #16]
 800454a:	9307      	str	r3, [sp, #28]
 800454c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004550:	931a      	str	r3, [sp, #104]	@ 0x68
 8004552:	4654      	mov	r4, sl
 8004554:	2205      	movs	r2, #5
 8004556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800455a:	4853      	ldr	r0, [pc, #332]	@ (80046a8 <_vfiprintf_r+0x21c>)
 800455c:	f7fb fe40 	bl	80001e0 <memchr>
 8004560:	9a04      	ldr	r2, [sp, #16]
 8004562:	b9d8      	cbnz	r0, 800459c <_vfiprintf_r+0x110>
 8004564:	06d1      	lsls	r1, r2, #27
 8004566:	bf44      	itt	mi
 8004568:	2320      	movmi	r3, #32
 800456a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800456e:	0713      	lsls	r3, r2, #28
 8004570:	bf44      	itt	mi
 8004572:	232b      	movmi	r3, #43	@ 0x2b
 8004574:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004578:	f89a 3000 	ldrb.w	r3, [sl]
 800457c:	2b2a      	cmp	r3, #42	@ 0x2a
 800457e:	d015      	beq.n	80045ac <_vfiprintf_r+0x120>
 8004580:	9a07      	ldr	r2, [sp, #28]
 8004582:	4654      	mov	r4, sl
 8004584:	2000      	movs	r0, #0
 8004586:	f04f 0c0a 	mov.w	ip, #10
 800458a:	4621      	mov	r1, r4
 800458c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004590:	3b30      	subs	r3, #48	@ 0x30
 8004592:	2b09      	cmp	r3, #9
 8004594:	d94b      	bls.n	800462e <_vfiprintf_r+0x1a2>
 8004596:	b1b0      	cbz	r0, 80045c6 <_vfiprintf_r+0x13a>
 8004598:	9207      	str	r2, [sp, #28]
 800459a:	e014      	b.n	80045c6 <_vfiprintf_r+0x13a>
 800459c:	eba0 0308 	sub.w	r3, r0, r8
 80045a0:	fa09 f303 	lsl.w	r3, r9, r3
 80045a4:	4313      	orrs	r3, r2
 80045a6:	9304      	str	r3, [sp, #16]
 80045a8:	46a2      	mov	sl, r4
 80045aa:	e7d2      	b.n	8004552 <_vfiprintf_r+0xc6>
 80045ac:	9b03      	ldr	r3, [sp, #12]
 80045ae:	1d19      	adds	r1, r3, #4
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	9103      	str	r1, [sp, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	bfbb      	ittet	lt
 80045b8:	425b      	neglt	r3, r3
 80045ba:	f042 0202 	orrlt.w	r2, r2, #2
 80045be:	9307      	strge	r3, [sp, #28]
 80045c0:	9307      	strlt	r3, [sp, #28]
 80045c2:	bfb8      	it	lt
 80045c4:	9204      	strlt	r2, [sp, #16]
 80045c6:	7823      	ldrb	r3, [r4, #0]
 80045c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80045ca:	d10a      	bne.n	80045e2 <_vfiprintf_r+0x156>
 80045cc:	7863      	ldrb	r3, [r4, #1]
 80045ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80045d0:	d132      	bne.n	8004638 <_vfiprintf_r+0x1ac>
 80045d2:	9b03      	ldr	r3, [sp, #12]
 80045d4:	1d1a      	adds	r2, r3, #4
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	9203      	str	r2, [sp, #12]
 80045da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045de:	3402      	adds	r4, #2
 80045e0:	9305      	str	r3, [sp, #20]
 80045e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80046b8 <_vfiprintf_r+0x22c>
 80045e6:	7821      	ldrb	r1, [r4, #0]
 80045e8:	2203      	movs	r2, #3
 80045ea:	4650      	mov	r0, sl
 80045ec:	f7fb fdf8 	bl	80001e0 <memchr>
 80045f0:	b138      	cbz	r0, 8004602 <_vfiprintf_r+0x176>
 80045f2:	9b04      	ldr	r3, [sp, #16]
 80045f4:	eba0 000a 	sub.w	r0, r0, sl
 80045f8:	2240      	movs	r2, #64	@ 0x40
 80045fa:	4082      	lsls	r2, r0
 80045fc:	4313      	orrs	r3, r2
 80045fe:	3401      	adds	r4, #1
 8004600:	9304      	str	r3, [sp, #16]
 8004602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004606:	4829      	ldr	r0, [pc, #164]	@ (80046ac <_vfiprintf_r+0x220>)
 8004608:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800460c:	2206      	movs	r2, #6
 800460e:	f7fb fde7 	bl	80001e0 <memchr>
 8004612:	2800      	cmp	r0, #0
 8004614:	d03f      	beq.n	8004696 <_vfiprintf_r+0x20a>
 8004616:	4b26      	ldr	r3, [pc, #152]	@ (80046b0 <_vfiprintf_r+0x224>)
 8004618:	bb1b      	cbnz	r3, 8004662 <_vfiprintf_r+0x1d6>
 800461a:	9b03      	ldr	r3, [sp, #12]
 800461c:	3307      	adds	r3, #7
 800461e:	f023 0307 	bic.w	r3, r3, #7
 8004622:	3308      	adds	r3, #8
 8004624:	9303      	str	r3, [sp, #12]
 8004626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004628:	443b      	add	r3, r7
 800462a:	9309      	str	r3, [sp, #36]	@ 0x24
 800462c:	e76a      	b.n	8004504 <_vfiprintf_r+0x78>
 800462e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004632:	460c      	mov	r4, r1
 8004634:	2001      	movs	r0, #1
 8004636:	e7a8      	b.n	800458a <_vfiprintf_r+0xfe>
 8004638:	2300      	movs	r3, #0
 800463a:	3401      	adds	r4, #1
 800463c:	9305      	str	r3, [sp, #20]
 800463e:	4619      	mov	r1, r3
 8004640:	f04f 0c0a 	mov.w	ip, #10
 8004644:	4620      	mov	r0, r4
 8004646:	f810 2b01 	ldrb.w	r2, [r0], #1
 800464a:	3a30      	subs	r2, #48	@ 0x30
 800464c:	2a09      	cmp	r2, #9
 800464e:	d903      	bls.n	8004658 <_vfiprintf_r+0x1cc>
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0c6      	beq.n	80045e2 <_vfiprintf_r+0x156>
 8004654:	9105      	str	r1, [sp, #20]
 8004656:	e7c4      	b.n	80045e2 <_vfiprintf_r+0x156>
 8004658:	fb0c 2101 	mla	r1, ip, r1, r2
 800465c:	4604      	mov	r4, r0
 800465e:	2301      	movs	r3, #1
 8004660:	e7f0      	b.n	8004644 <_vfiprintf_r+0x1b8>
 8004662:	ab03      	add	r3, sp, #12
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	462a      	mov	r2, r5
 8004668:	4b12      	ldr	r3, [pc, #72]	@ (80046b4 <_vfiprintf_r+0x228>)
 800466a:	a904      	add	r1, sp, #16
 800466c:	4630      	mov	r0, r6
 800466e:	f3af 8000 	nop.w
 8004672:	4607      	mov	r7, r0
 8004674:	1c78      	adds	r0, r7, #1
 8004676:	d1d6      	bne.n	8004626 <_vfiprintf_r+0x19a>
 8004678:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800467a:	07d9      	lsls	r1, r3, #31
 800467c:	d405      	bmi.n	800468a <_vfiprintf_r+0x1fe>
 800467e:	89ab      	ldrh	r3, [r5, #12]
 8004680:	059a      	lsls	r2, r3, #22
 8004682:	d402      	bmi.n	800468a <_vfiprintf_r+0x1fe>
 8004684:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004686:	f7ff fddd 	bl	8004244 <__retarget_lock_release_recursive>
 800468a:	89ab      	ldrh	r3, [r5, #12]
 800468c:	065b      	lsls	r3, r3, #25
 800468e:	f53f af1f 	bmi.w	80044d0 <_vfiprintf_r+0x44>
 8004692:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004694:	e71e      	b.n	80044d4 <_vfiprintf_r+0x48>
 8004696:	ab03      	add	r3, sp, #12
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	462a      	mov	r2, r5
 800469c:	4b05      	ldr	r3, [pc, #20]	@ (80046b4 <_vfiprintf_r+0x228>)
 800469e:	a904      	add	r1, sp, #16
 80046a0:	4630      	mov	r0, r6
 80046a2:	f000 f879 	bl	8004798 <_printf_i>
 80046a6:	e7e4      	b.n	8004672 <_vfiprintf_r+0x1e6>
 80046a8:	08004dc0 	.word	0x08004dc0
 80046ac:	08004dca 	.word	0x08004dca
 80046b0:	00000000 	.word	0x00000000
 80046b4:	08004467 	.word	0x08004467
 80046b8:	08004dc6 	.word	0x08004dc6

080046bc <_printf_common>:
 80046bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046c0:	4616      	mov	r6, r2
 80046c2:	4698      	mov	r8, r3
 80046c4:	688a      	ldr	r2, [r1, #8]
 80046c6:	690b      	ldr	r3, [r1, #16]
 80046c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046cc:	4293      	cmp	r3, r2
 80046ce:	bfb8      	it	lt
 80046d0:	4613      	movlt	r3, r2
 80046d2:	6033      	str	r3, [r6, #0]
 80046d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046d8:	4607      	mov	r7, r0
 80046da:	460c      	mov	r4, r1
 80046dc:	b10a      	cbz	r2, 80046e2 <_printf_common+0x26>
 80046de:	3301      	adds	r3, #1
 80046e0:	6033      	str	r3, [r6, #0]
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	0699      	lsls	r1, r3, #26
 80046e6:	bf42      	ittt	mi
 80046e8:	6833      	ldrmi	r3, [r6, #0]
 80046ea:	3302      	addmi	r3, #2
 80046ec:	6033      	strmi	r3, [r6, #0]
 80046ee:	6825      	ldr	r5, [r4, #0]
 80046f0:	f015 0506 	ands.w	r5, r5, #6
 80046f4:	d106      	bne.n	8004704 <_printf_common+0x48>
 80046f6:	f104 0a19 	add.w	sl, r4, #25
 80046fa:	68e3      	ldr	r3, [r4, #12]
 80046fc:	6832      	ldr	r2, [r6, #0]
 80046fe:	1a9b      	subs	r3, r3, r2
 8004700:	42ab      	cmp	r3, r5
 8004702:	dc26      	bgt.n	8004752 <_printf_common+0x96>
 8004704:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004708:	6822      	ldr	r2, [r4, #0]
 800470a:	3b00      	subs	r3, #0
 800470c:	bf18      	it	ne
 800470e:	2301      	movne	r3, #1
 8004710:	0692      	lsls	r2, r2, #26
 8004712:	d42b      	bmi.n	800476c <_printf_common+0xb0>
 8004714:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004718:	4641      	mov	r1, r8
 800471a:	4638      	mov	r0, r7
 800471c:	47c8      	blx	r9
 800471e:	3001      	adds	r0, #1
 8004720:	d01e      	beq.n	8004760 <_printf_common+0xa4>
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	6922      	ldr	r2, [r4, #16]
 8004726:	f003 0306 	and.w	r3, r3, #6
 800472a:	2b04      	cmp	r3, #4
 800472c:	bf02      	ittt	eq
 800472e:	68e5      	ldreq	r5, [r4, #12]
 8004730:	6833      	ldreq	r3, [r6, #0]
 8004732:	1aed      	subeq	r5, r5, r3
 8004734:	68a3      	ldr	r3, [r4, #8]
 8004736:	bf0c      	ite	eq
 8004738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800473c:	2500      	movne	r5, #0
 800473e:	4293      	cmp	r3, r2
 8004740:	bfc4      	itt	gt
 8004742:	1a9b      	subgt	r3, r3, r2
 8004744:	18ed      	addgt	r5, r5, r3
 8004746:	2600      	movs	r6, #0
 8004748:	341a      	adds	r4, #26
 800474a:	42b5      	cmp	r5, r6
 800474c:	d11a      	bne.n	8004784 <_printf_common+0xc8>
 800474e:	2000      	movs	r0, #0
 8004750:	e008      	b.n	8004764 <_printf_common+0xa8>
 8004752:	2301      	movs	r3, #1
 8004754:	4652      	mov	r2, sl
 8004756:	4641      	mov	r1, r8
 8004758:	4638      	mov	r0, r7
 800475a:	47c8      	blx	r9
 800475c:	3001      	adds	r0, #1
 800475e:	d103      	bne.n	8004768 <_printf_common+0xac>
 8004760:	f04f 30ff 	mov.w	r0, #4294967295
 8004764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004768:	3501      	adds	r5, #1
 800476a:	e7c6      	b.n	80046fa <_printf_common+0x3e>
 800476c:	18e1      	adds	r1, r4, r3
 800476e:	1c5a      	adds	r2, r3, #1
 8004770:	2030      	movs	r0, #48	@ 0x30
 8004772:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004776:	4422      	add	r2, r4
 8004778:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800477c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004780:	3302      	adds	r3, #2
 8004782:	e7c7      	b.n	8004714 <_printf_common+0x58>
 8004784:	2301      	movs	r3, #1
 8004786:	4622      	mov	r2, r4
 8004788:	4641      	mov	r1, r8
 800478a:	4638      	mov	r0, r7
 800478c:	47c8      	blx	r9
 800478e:	3001      	adds	r0, #1
 8004790:	d0e6      	beq.n	8004760 <_printf_common+0xa4>
 8004792:	3601      	adds	r6, #1
 8004794:	e7d9      	b.n	800474a <_printf_common+0x8e>
	...

08004798 <_printf_i>:
 8004798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800479c:	7e0f      	ldrb	r7, [r1, #24]
 800479e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047a0:	2f78      	cmp	r7, #120	@ 0x78
 80047a2:	4691      	mov	r9, r2
 80047a4:	4680      	mov	r8, r0
 80047a6:	460c      	mov	r4, r1
 80047a8:	469a      	mov	sl, r3
 80047aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047ae:	d807      	bhi.n	80047c0 <_printf_i+0x28>
 80047b0:	2f62      	cmp	r7, #98	@ 0x62
 80047b2:	d80a      	bhi.n	80047ca <_printf_i+0x32>
 80047b4:	2f00      	cmp	r7, #0
 80047b6:	f000 80d2 	beq.w	800495e <_printf_i+0x1c6>
 80047ba:	2f58      	cmp	r7, #88	@ 0x58
 80047bc:	f000 80b9 	beq.w	8004932 <_printf_i+0x19a>
 80047c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047c8:	e03a      	b.n	8004840 <_printf_i+0xa8>
 80047ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047ce:	2b15      	cmp	r3, #21
 80047d0:	d8f6      	bhi.n	80047c0 <_printf_i+0x28>
 80047d2:	a101      	add	r1, pc, #4	@ (adr r1, 80047d8 <_printf_i+0x40>)
 80047d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047d8:	08004831 	.word	0x08004831
 80047dc:	08004845 	.word	0x08004845
 80047e0:	080047c1 	.word	0x080047c1
 80047e4:	080047c1 	.word	0x080047c1
 80047e8:	080047c1 	.word	0x080047c1
 80047ec:	080047c1 	.word	0x080047c1
 80047f0:	08004845 	.word	0x08004845
 80047f4:	080047c1 	.word	0x080047c1
 80047f8:	080047c1 	.word	0x080047c1
 80047fc:	080047c1 	.word	0x080047c1
 8004800:	080047c1 	.word	0x080047c1
 8004804:	08004945 	.word	0x08004945
 8004808:	0800486f 	.word	0x0800486f
 800480c:	080048ff 	.word	0x080048ff
 8004810:	080047c1 	.word	0x080047c1
 8004814:	080047c1 	.word	0x080047c1
 8004818:	08004967 	.word	0x08004967
 800481c:	080047c1 	.word	0x080047c1
 8004820:	0800486f 	.word	0x0800486f
 8004824:	080047c1 	.word	0x080047c1
 8004828:	080047c1 	.word	0x080047c1
 800482c:	08004907 	.word	0x08004907
 8004830:	6833      	ldr	r3, [r6, #0]
 8004832:	1d1a      	adds	r2, r3, #4
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6032      	str	r2, [r6, #0]
 8004838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800483c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004840:	2301      	movs	r3, #1
 8004842:	e09d      	b.n	8004980 <_printf_i+0x1e8>
 8004844:	6833      	ldr	r3, [r6, #0]
 8004846:	6820      	ldr	r0, [r4, #0]
 8004848:	1d19      	adds	r1, r3, #4
 800484a:	6031      	str	r1, [r6, #0]
 800484c:	0606      	lsls	r6, r0, #24
 800484e:	d501      	bpl.n	8004854 <_printf_i+0xbc>
 8004850:	681d      	ldr	r5, [r3, #0]
 8004852:	e003      	b.n	800485c <_printf_i+0xc4>
 8004854:	0645      	lsls	r5, r0, #25
 8004856:	d5fb      	bpl.n	8004850 <_printf_i+0xb8>
 8004858:	f9b3 5000 	ldrsh.w	r5, [r3]
 800485c:	2d00      	cmp	r5, #0
 800485e:	da03      	bge.n	8004868 <_printf_i+0xd0>
 8004860:	232d      	movs	r3, #45	@ 0x2d
 8004862:	426d      	negs	r5, r5
 8004864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004868:	4859      	ldr	r0, [pc, #356]	@ (80049d0 <_printf_i+0x238>)
 800486a:	230a      	movs	r3, #10
 800486c:	e011      	b.n	8004892 <_printf_i+0xfa>
 800486e:	6821      	ldr	r1, [r4, #0]
 8004870:	6833      	ldr	r3, [r6, #0]
 8004872:	0608      	lsls	r0, r1, #24
 8004874:	f853 5b04 	ldr.w	r5, [r3], #4
 8004878:	d402      	bmi.n	8004880 <_printf_i+0xe8>
 800487a:	0649      	lsls	r1, r1, #25
 800487c:	bf48      	it	mi
 800487e:	b2ad      	uxthmi	r5, r5
 8004880:	2f6f      	cmp	r7, #111	@ 0x6f
 8004882:	4853      	ldr	r0, [pc, #332]	@ (80049d0 <_printf_i+0x238>)
 8004884:	6033      	str	r3, [r6, #0]
 8004886:	bf14      	ite	ne
 8004888:	230a      	movne	r3, #10
 800488a:	2308      	moveq	r3, #8
 800488c:	2100      	movs	r1, #0
 800488e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004892:	6866      	ldr	r6, [r4, #4]
 8004894:	60a6      	str	r6, [r4, #8]
 8004896:	2e00      	cmp	r6, #0
 8004898:	bfa2      	ittt	ge
 800489a:	6821      	ldrge	r1, [r4, #0]
 800489c:	f021 0104 	bicge.w	r1, r1, #4
 80048a0:	6021      	strge	r1, [r4, #0]
 80048a2:	b90d      	cbnz	r5, 80048a8 <_printf_i+0x110>
 80048a4:	2e00      	cmp	r6, #0
 80048a6:	d04b      	beq.n	8004940 <_printf_i+0x1a8>
 80048a8:	4616      	mov	r6, r2
 80048aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80048ae:	fb03 5711 	mls	r7, r3, r1, r5
 80048b2:	5dc7      	ldrb	r7, [r0, r7]
 80048b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048b8:	462f      	mov	r7, r5
 80048ba:	42bb      	cmp	r3, r7
 80048bc:	460d      	mov	r5, r1
 80048be:	d9f4      	bls.n	80048aa <_printf_i+0x112>
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d10b      	bne.n	80048dc <_printf_i+0x144>
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	07df      	lsls	r7, r3, #31
 80048c8:	d508      	bpl.n	80048dc <_printf_i+0x144>
 80048ca:	6923      	ldr	r3, [r4, #16]
 80048cc:	6861      	ldr	r1, [r4, #4]
 80048ce:	4299      	cmp	r1, r3
 80048d0:	bfde      	ittt	le
 80048d2:	2330      	movle	r3, #48	@ 0x30
 80048d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048dc:	1b92      	subs	r2, r2, r6
 80048de:	6122      	str	r2, [r4, #16]
 80048e0:	f8cd a000 	str.w	sl, [sp]
 80048e4:	464b      	mov	r3, r9
 80048e6:	aa03      	add	r2, sp, #12
 80048e8:	4621      	mov	r1, r4
 80048ea:	4640      	mov	r0, r8
 80048ec:	f7ff fee6 	bl	80046bc <_printf_common>
 80048f0:	3001      	adds	r0, #1
 80048f2:	d14a      	bne.n	800498a <_printf_i+0x1f2>
 80048f4:	f04f 30ff 	mov.w	r0, #4294967295
 80048f8:	b004      	add	sp, #16
 80048fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	f043 0320 	orr.w	r3, r3, #32
 8004904:	6023      	str	r3, [r4, #0]
 8004906:	4833      	ldr	r0, [pc, #204]	@ (80049d4 <_printf_i+0x23c>)
 8004908:	2778      	movs	r7, #120	@ 0x78
 800490a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	6831      	ldr	r1, [r6, #0]
 8004912:	061f      	lsls	r7, r3, #24
 8004914:	f851 5b04 	ldr.w	r5, [r1], #4
 8004918:	d402      	bmi.n	8004920 <_printf_i+0x188>
 800491a:	065f      	lsls	r7, r3, #25
 800491c:	bf48      	it	mi
 800491e:	b2ad      	uxthmi	r5, r5
 8004920:	6031      	str	r1, [r6, #0]
 8004922:	07d9      	lsls	r1, r3, #31
 8004924:	bf44      	itt	mi
 8004926:	f043 0320 	orrmi.w	r3, r3, #32
 800492a:	6023      	strmi	r3, [r4, #0]
 800492c:	b11d      	cbz	r5, 8004936 <_printf_i+0x19e>
 800492e:	2310      	movs	r3, #16
 8004930:	e7ac      	b.n	800488c <_printf_i+0xf4>
 8004932:	4827      	ldr	r0, [pc, #156]	@ (80049d0 <_printf_i+0x238>)
 8004934:	e7e9      	b.n	800490a <_printf_i+0x172>
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	f023 0320 	bic.w	r3, r3, #32
 800493c:	6023      	str	r3, [r4, #0]
 800493e:	e7f6      	b.n	800492e <_printf_i+0x196>
 8004940:	4616      	mov	r6, r2
 8004942:	e7bd      	b.n	80048c0 <_printf_i+0x128>
 8004944:	6833      	ldr	r3, [r6, #0]
 8004946:	6825      	ldr	r5, [r4, #0]
 8004948:	6961      	ldr	r1, [r4, #20]
 800494a:	1d18      	adds	r0, r3, #4
 800494c:	6030      	str	r0, [r6, #0]
 800494e:	062e      	lsls	r6, r5, #24
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	d501      	bpl.n	8004958 <_printf_i+0x1c0>
 8004954:	6019      	str	r1, [r3, #0]
 8004956:	e002      	b.n	800495e <_printf_i+0x1c6>
 8004958:	0668      	lsls	r0, r5, #25
 800495a:	d5fb      	bpl.n	8004954 <_printf_i+0x1bc>
 800495c:	8019      	strh	r1, [r3, #0]
 800495e:	2300      	movs	r3, #0
 8004960:	6123      	str	r3, [r4, #16]
 8004962:	4616      	mov	r6, r2
 8004964:	e7bc      	b.n	80048e0 <_printf_i+0x148>
 8004966:	6833      	ldr	r3, [r6, #0]
 8004968:	1d1a      	adds	r2, r3, #4
 800496a:	6032      	str	r2, [r6, #0]
 800496c:	681e      	ldr	r6, [r3, #0]
 800496e:	6862      	ldr	r2, [r4, #4]
 8004970:	2100      	movs	r1, #0
 8004972:	4630      	mov	r0, r6
 8004974:	f7fb fc34 	bl	80001e0 <memchr>
 8004978:	b108      	cbz	r0, 800497e <_printf_i+0x1e6>
 800497a:	1b80      	subs	r0, r0, r6
 800497c:	6060      	str	r0, [r4, #4]
 800497e:	6863      	ldr	r3, [r4, #4]
 8004980:	6123      	str	r3, [r4, #16]
 8004982:	2300      	movs	r3, #0
 8004984:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004988:	e7aa      	b.n	80048e0 <_printf_i+0x148>
 800498a:	6923      	ldr	r3, [r4, #16]
 800498c:	4632      	mov	r2, r6
 800498e:	4649      	mov	r1, r9
 8004990:	4640      	mov	r0, r8
 8004992:	47d0      	blx	sl
 8004994:	3001      	adds	r0, #1
 8004996:	d0ad      	beq.n	80048f4 <_printf_i+0x15c>
 8004998:	6823      	ldr	r3, [r4, #0]
 800499a:	079b      	lsls	r3, r3, #30
 800499c:	d413      	bmi.n	80049c6 <_printf_i+0x22e>
 800499e:	68e0      	ldr	r0, [r4, #12]
 80049a0:	9b03      	ldr	r3, [sp, #12]
 80049a2:	4298      	cmp	r0, r3
 80049a4:	bfb8      	it	lt
 80049a6:	4618      	movlt	r0, r3
 80049a8:	e7a6      	b.n	80048f8 <_printf_i+0x160>
 80049aa:	2301      	movs	r3, #1
 80049ac:	4632      	mov	r2, r6
 80049ae:	4649      	mov	r1, r9
 80049b0:	4640      	mov	r0, r8
 80049b2:	47d0      	blx	sl
 80049b4:	3001      	adds	r0, #1
 80049b6:	d09d      	beq.n	80048f4 <_printf_i+0x15c>
 80049b8:	3501      	adds	r5, #1
 80049ba:	68e3      	ldr	r3, [r4, #12]
 80049bc:	9903      	ldr	r1, [sp, #12]
 80049be:	1a5b      	subs	r3, r3, r1
 80049c0:	42ab      	cmp	r3, r5
 80049c2:	dcf2      	bgt.n	80049aa <_printf_i+0x212>
 80049c4:	e7eb      	b.n	800499e <_printf_i+0x206>
 80049c6:	2500      	movs	r5, #0
 80049c8:	f104 0619 	add.w	r6, r4, #25
 80049cc:	e7f5      	b.n	80049ba <_printf_i+0x222>
 80049ce:	bf00      	nop
 80049d0:	08004dd1 	.word	0x08004dd1
 80049d4:	08004de2 	.word	0x08004de2

080049d8 <__sflush_r>:
 80049d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80049dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049e0:	0716      	lsls	r6, r2, #28
 80049e2:	4605      	mov	r5, r0
 80049e4:	460c      	mov	r4, r1
 80049e6:	d454      	bmi.n	8004a92 <__sflush_r+0xba>
 80049e8:	684b      	ldr	r3, [r1, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	dc02      	bgt.n	80049f4 <__sflush_r+0x1c>
 80049ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	dd48      	ble.n	8004a86 <__sflush_r+0xae>
 80049f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80049f6:	2e00      	cmp	r6, #0
 80049f8:	d045      	beq.n	8004a86 <__sflush_r+0xae>
 80049fa:	2300      	movs	r3, #0
 80049fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004a00:	682f      	ldr	r7, [r5, #0]
 8004a02:	6a21      	ldr	r1, [r4, #32]
 8004a04:	602b      	str	r3, [r5, #0]
 8004a06:	d030      	beq.n	8004a6a <__sflush_r+0x92>
 8004a08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a0a:	89a3      	ldrh	r3, [r4, #12]
 8004a0c:	0759      	lsls	r1, r3, #29
 8004a0e:	d505      	bpl.n	8004a1c <__sflush_r+0x44>
 8004a10:	6863      	ldr	r3, [r4, #4]
 8004a12:	1ad2      	subs	r2, r2, r3
 8004a14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a16:	b10b      	cbz	r3, 8004a1c <__sflush_r+0x44>
 8004a18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a1a:	1ad2      	subs	r2, r2, r3
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a20:	6a21      	ldr	r1, [r4, #32]
 8004a22:	4628      	mov	r0, r5
 8004a24:	47b0      	blx	r6
 8004a26:	1c43      	adds	r3, r0, #1
 8004a28:	89a3      	ldrh	r3, [r4, #12]
 8004a2a:	d106      	bne.n	8004a3a <__sflush_r+0x62>
 8004a2c:	6829      	ldr	r1, [r5, #0]
 8004a2e:	291d      	cmp	r1, #29
 8004a30:	d82b      	bhi.n	8004a8a <__sflush_r+0xb2>
 8004a32:	4a2a      	ldr	r2, [pc, #168]	@ (8004adc <__sflush_r+0x104>)
 8004a34:	410a      	asrs	r2, r1
 8004a36:	07d6      	lsls	r6, r2, #31
 8004a38:	d427      	bmi.n	8004a8a <__sflush_r+0xb2>
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	6062      	str	r2, [r4, #4]
 8004a3e:	04d9      	lsls	r1, r3, #19
 8004a40:	6922      	ldr	r2, [r4, #16]
 8004a42:	6022      	str	r2, [r4, #0]
 8004a44:	d504      	bpl.n	8004a50 <__sflush_r+0x78>
 8004a46:	1c42      	adds	r2, r0, #1
 8004a48:	d101      	bne.n	8004a4e <__sflush_r+0x76>
 8004a4a:	682b      	ldr	r3, [r5, #0]
 8004a4c:	b903      	cbnz	r3, 8004a50 <__sflush_r+0x78>
 8004a4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a52:	602f      	str	r7, [r5, #0]
 8004a54:	b1b9      	cbz	r1, 8004a86 <__sflush_r+0xae>
 8004a56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a5a:	4299      	cmp	r1, r3
 8004a5c:	d002      	beq.n	8004a64 <__sflush_r+0x8c>
 8004a5e:	4628      	mov	r0, r5
 8004a60:	f7ff fbf2 	bl	8004248 <_free_r>
 8004a64:	2300      	movs	r3, #0
 8004a66:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a68:	e00d      	b.n	8004a86 <__sflush_r+0xae>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	47b0      	blx	r6
 8004a70:	4602      	mov	r2, r0
 8004a72:	1c50      	adds	r0, r2, #1
 8004a74:	d1c9      	bne.n	8004a0a <__sflush_r+0x32>
 8004a76:	682b      	ldr	r3, [r5, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0c6      	beq.n	8004a0a <__sflush_r+0x32>
 8004a7c:	2b1d      	cmp	r3, #29
 8004a7e:	d001      	beq.n	8004a84 <__sflush_r+0xac>
 8004a80:	2b16      	cmp	r3, #22
 8004a82:	d11e      	bne.n	8004ac2 <__sflush_r+0xea>
 8004a84:	602f      	str	r7, [r5, #0]
 8004a86:	2000      	movs	r0, #0
 8004a88:	e022      	b.n	8004ad0 <__sflush_r+0xf8>
 8004a8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a8e:	b21b      	sxth	r3, r3
 8004a90:	e01b      	b.n	8004aca <__sflush_r+0xf2>
 8004a92:	690f      	ldr	r7, [r1, #16]
 8004a94:	2f00      	cmp	r7, #0
 8004a96:	d0f6      	beq.n	8004a86 <__sflush_r+0xae>
 8004a98:	0793      	lsls	r3, r2, #30
 8004a9a:	680e      	ldr	r6, [r1, #0]
 8004a9c:	bf08      	it	eq
 8004a9e:	694b      	ldreq	r3, [r1, #20]
 8004aa0:	600f      	str	r7, [r1, #0]
 8004aa2:	bf18      	it	ne
 8004aa4:	2300      	movne	r3, #0
 8004aa6:	eba6 0807 	sub.w	r8, r6, r7
 8004aaa:	608b      	str	r3, [r1, #8]
 8004aac:	f1b8 0f00 	cmp.w	r8, #0
 8004ab0:	dde9      	ble.n	8004a86 <__sflush_r+0xae>
 8004ab2:	6a21      	ldr	r1, [r4, #32]
 8004ab4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004ab6:	4643      	mov	r3, r8
 8004ab8:	463a      	mov	r2, r7
 8004aba:	4628      	mov	r0, r5
 8004abc:	47b0      	blx	r6
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	dc08      	bgt.n	8004ad4 <__sflush_r+0xfc>
 8004ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ac6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004aca:	81a3      	strh	r3, [r4, #12]
 8004acc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ad4:	4407      	add	r7, r0
 8004ad6:	eba8 0800 	sub.w	r8, r8, r0
 8004ada:	e7e7      	b.n	8004aac <__sflush_r+0xd4>
 8004adc:	dfbffffe 	.word	0xdfbffffe

08004ae0 <_fflush_r>:
 8004ae0:	b538      	push	{r3, r4, r5, lr}
 8004ae2:	690b      	ldr	r3, [r1, #16]
 8004ae4:	4605      	mov	r5, r0
 8004ae6:	460c      	mov	r4, r1
 8004ae8:	b913      	cbnz	r3, 8004af0 <_fflush_r+0x10>
 8004aea:	2500      	movs	r5, #0
 8004aec:	4628      	mov	r0, r5
 8004aee:	bd38      	pop	{r3, r4, r5, pc}
 8004af0:	b118      	cbz	r0, 8004afa <_fflush_r+0x1a>
 8004af2:	6a03      	ldr	r3, [r0, #32]
 8004af4:	b90b      	cbnz	r3, 8004afa <_fflush_r+0x1a>
 8004af6:	f7ff fa9f 	bl	8004038 <__sinit>
 8004afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0f3      	beq.n	8004aea <_fflush_r+0xa>
 8004b02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b04:	07d0      	lsls	r0, r2, #31
 8004b06:	d404      	bmi.n	8004b12 <_fflush_r+0x32>
 8004b08:	0599      	lsls	r1, r3, #22
 8004b0a:	d402      	bmi.n	8004b12 <_fflush_r+0x32>
 8004b0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b0e:	f7ff fb98 	bl	8004242 <__retarget_lock_acquire_recursive>
 8004b12:	4628      	mov	r0, r5
 8004b14:	4621      	mov	r1, r4
 8004b16:	f7ff ff5f 	bl	80049d8 <__sflush_r>
 8004b1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b1c:	07da      	lsls	r2, r3, #31
 8004b1e:	4605      	mov	r5, r0
 8004b20:	d4e4      	bmi.n	8004aec <_fflush_r+0xc>
 8004b22:	89a3      	ldrh	r3, [r4, #12]
 8004b24:	059b      	lsls	r3, r3, #22
 8004b26:	d4e1      	bmi.n	8004aec <_fflush_r+0xc>
 8004b28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b2a:	f7ff fb8b 	bl	8004244 <__retarget_lock_release_recursive>
 8004b2e:	e7dd      	b.n	8004aec <_fflush_r+0xc>

08004b30 <__swbuf_r>:
 8004b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b32:	460e      	mov	r6, r1
 8004b34:	4614      	mov	r4, r2
 8004b36:	4605      	mov	r5, r0
 8004b38:	b118      	cbz	r0, 8004b42 <__swbuf_r+0x12>
 8004b3a:	6a03      	ldr	r3, [r0, #32]
 8004b3c:	b90b      	cbnz	r3, 8004b42 <__swbuf_r+0x12>
 8004b3e:	f7ff fa7b 	bl	8004038 <__sinit>
 8004b42:	69a3      	ldr	r3, [r4, #24]
 8004b44:	60a3      	str	r3, [r4, #8]
 8004b46:	89a3      	ldrh	r3, [r4, #12]
 8004b48:	071a      	lsls	r2, r3, #28
 8004b4a:	d501      	bpl.n	8004b50 <__swbuf_r+0x20>
 8004b4c:	6923      	ldr	r3, [r4, #16]
 8004b4e:	b943      	cbnz	r3, 8004b62 <__swbuf_r+0x32>
 8004b50:	4621      	mov	r1, r4
 8004b52:	4628      	mov	r0, r5
 8004b54:	f000 f82a 	bl	8004bac <__swsetup_r>
 8004b58:	b118      	cbz	r0, 8004b62 <__swbuf_r+0x32>
 8004b5a:	f04f 37ff 	mov.w	r7, #4294967295
 8004b5e:	4638      	mov	r0, r7
 8004b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	6922      	ldr	r2, [r4, #16]
 8004b66:	1a98      	subs	r0, r3, r2
 8004b68:	6963      	ldr	r3, [r4, #20]
 8004b6a:	b2f6      	uxtb	r6, r6
 8004b6c:	4283      	cmp	r3, r0
 8004b6e:	4637      	mov	r7, r6
 8004b70:	dc05      	bgt.n	8004b7e <__swbuf_r+0x4e>
 8004b72:	4621      	mov	r1, r4
 8004b74:	4628      	mov	r0, r5
 8004b76:	f7ff ffb3 	bl	8004ae0 <_fflush_r>
 8004b7a:	2800      	cmp	r0, #0
 8004b7c:	d1ed      	bne.n	8004b5a <__swbuf_r+0x2a>
 8004b7e:	68a3      	ldr	r3, [r4, #8]
 8004b80:	3b01      	subs	r3, #1
 8004b82:	60a3      	str	r3, [r4, #8]
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	6022      	str	r2, [r4, #0]
 8004b8a:	701e      	strb	r6, [r3, #0]
 8004b8c:	6962      	ldr	r2, [r4, #20]
 8004b8e:	1c43      	adds	r3, r0, #1
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d004      	beq.n	8004b9e <__swbuf_r+0x6e>
 8004b94:	89a3      	ldrh	r3, [r4, #12]
 8004b96:	07db      	lsls	r3, r3, #31
 8004b98:	d5e1      	bpl.n	8004b5e <__swbuf_r+0x2e>
 8004b9a:	2e0a      	cmp	r6, #10
 8004b9c:	d1df      	bne.n	8004b5e <__swbuf_r+0x2e>
 8004b9e:	4621      	mov	r1, r4
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	f7ff ff9d 	bl	8004ae0 <_fflush_r>
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	d0d9      	beq.n	8004b5e <__swbuf_r+0x2e>
 8004baa:	e7d6      	b.n	8004b5a <__swbuf_r+0x2a>

08004bac <__swsetup_r>:
 8004bac:	b538      	push	{r3, r4, r5, lr}
 8004bae:	4b29      	ldr	r3, [pc, #164]	@ (8004c54 <__swsetup_r+0xa8>)
 8004bb0:	4605      	mov	r5, r0
 8004bb2:	6818      	ldr	r0, [r3, #0]
 8004bb4:	460c      	mov	r4, r1
 8004bb6:	b118      	cbz	r0, 8004bc0 <__swsetup_r+0x14>
 8004bb8:	6a03      	ldr	r3, [r0, #32]
 8004bba:	b90b      	cbnz	r3, 8004bc0 <__swsetup_r+0x14>
 8004bbc:	f7ff fa3c 	bl	8004038 <__sinit>
 8004bc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bc4:	0719      	lsls	r1, r3, #28
 8004bc6:	d422      	bmi.n	8004c0e <__swsetup_r+0x62>
 8004bc8:	06da      	lsls	r2, r3, #27
 8004bca:	d407      	bmi.n	8004bdc <__swsetup_r+0x30>
 8004bcc:	2209      	movs	r2, #9
 8004bce:	602a      	str	r2, [r5, #0]
 8004bd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bd4:	81a3      	strh	r3, [r4, #12]
 8004bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bda:	e033      	b.n	8004c44 <__swsetup_r+0x98>
 8004bdc:	0758      	lsls	r0, r3, #29
 8004bde:	d512      	bpl.n	8004c06 <__swsetup_r+0x5a>
 8004be0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004be2:	b141      	cbz	r1, 8004bf6 <__swsetup_r+0x4a>
 8004be4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004be8:	4299      	cmp	r1, r3
 8004bea:	d002      	beq.n	8004bf2 <__swsetup_r+0x46>
 8004bec:	4628      	mov	r0, r5
 8004bee:	f7ff fb2b 	bl	8004248 <_free_r>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	6363      	str	r3, [r4, #52]	@ 0x34
 8004bf6:	89a3      	ldrh	r3, [r4, #12]
 8004bf8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004bfc:	81a3      	strh	r3, [r4, #12]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	6063      	str	r3, [r4, #4]
 8004c02:	6923      	ldr	r3, [r4, #16]
 8004c04:	6023      	str	r3, [r4, #0]
 8004c06:	89a3      	ldrh	r3, [r4, #12]
 8004c08:	f043 0308 	orr.w	r3, r3, #8
 8004c0c:	81a3      	strh	r3, [r4, #12]
 8004c0e:	6923      	ldr	r3, [r4, #16]
 8004c10:	b94b      	cbnz	r3, 8004c26 <__swsetup_r+0x7a>
 8004c12:	89a3      	ldrh	r3, [r4, #12]
 8004c14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c1c:	d003      	beq.n	8004c26 <__swsetup_r+0x7a>
 8004c1e:	4621      	mov	r1, r4
 8004c20:	4628      	mov	r0, r5
 8004c22:	f000 f84f 	bl	8004cc4 <__smakebuf_r>
 8004c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c2a:	f013 0201 	ands.w	r2, r3, #1
 8004c2e:	d00a      	beq.n	8004c46 <__swsetup_r+0x9a>
 8004c30:	2200      	movs	r2, #0
 8004c32:	60a2      	str	r2, [r4, #8]
 8004c34:	6962      	ldr	r2, [r4, #20]
 8004c36:	4252      	negs	r2, r2
 8004c38:	61a2      	str	r2, [r4, #24]
 8004c3a:	6922      	ldr	r2, [r4, #16]
 8004c3c:	b942      	cbnz	r2, 8004c50 <__swsetup_r+0xa4>
 8004c3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004c42:	d1c5      	bne.n	8004bd0 <__swsetup_r+0x24>
 8004c44:	bd38      	pop	{r3, r4, r5, pc}
 8004c46:	0799      	lsls	r1, r3, #30
 8004c48:	bf58      	it	pl
 8004c4a:	6962      	ldrpl	r2, [r4, #20]
 8004c4c:	60a2      	str	r2, [r4, #8]
 8004c4e:	e7f4      	b.n	8004c3a <__swsetup_r+0x8e>
 8004c50:	2000      	movs	r0, #0
 8004c52:	e7f7      	b.n	8004c44 <__swsetup_r+0x98>
 8004c54:	20000018 	.word	0x20000018

08004c58 <_sbrk_r>:
 8004c58:	b538      	push	{r3, r4, r5, lr}
 8004c5a:	4d06      	ldr	r5, [pc, #24]	@ (8004c74 <_sbrk_r+0x1c>)
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	4604      	mov	r4, r0
 8004c60:	4608      	mov	r0, r1
 8004c62:	602b      	str	r3, [r5, #0]
 8004c64:	f7fc fce0 	bl	8001628 <_sbrk>
 8004c68:	1c43      	adds	r3, r0, #1
 8004c6a:	d102      	bne.n	8004c72 <_sbrk_r+0x1a>
 8004c6c:	682b      	ldr	r3, [r5, #0]
 8004c6e:	b103      	cbz	r3, 8004c72 <_sbrk_r+0x1a>
 8004c70:	6023      	str	r3, [r4, #0]
 8004c72:	bd38      	pop	{r3, r4, r5, pc}
 8004c74:	200002cc 	.word	0x200002cc

08004c78 <__swhatbuf_r>:
 8004c78:	b570      	push	{r4, r5, r6, lr}
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c80:	2900      	cmp	r1, #0
 8004c82:	b096      	sub	sp, #88	@ 0x58
 8004c84:	4615      	mov	r5, r2
 8004c86:	461e      	mov	r6, r3
 8004c88:	da0d      	bge.n	8004ca6 <__swhatbuf_r+0x2e>
 8004c8a:	89a3      	ldrh	r3, [r4, #12]
 8004c8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004c90:	f04f 0100 	mov.w	r1, #0
 8004c94:	bf14      	ite	ne
 8004c96:	2340      	movne	r3, #64	@ 0x40
 8004c98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	6031      	str	r1, [r6, #0]
 8004ca0:	602b      	str	r3, [r5, #0]
 8004ca2:	b016      	add	sp, #88	@ 0x58
 8004ca4:	bd70      	pop	{r4, r5, r6, pc}
 8004ca6:	466a      	mov	r2, sp
 8004ca8:	f000 f848 	bl	8004d3c <_fstat_r>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	dbec      	blt.n	8004c8a <__swhatbuf_r+0x12>
 8004cb0:	9901      	ldr	r1, [sp, #4]
 8004cb2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004cb6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004cba:	4259      	negs	r1, r3
 8004cbc:	4159      	adcs	r1, r3
 8004cbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004cc2:	e7eb      	b.n	8004c9c <__swhatbuf_r+0x24>

08004cc4 <__smakebuf_r>:
 8004cc4:	898b      	ldrh	r3, [r1, #12]
 8004cc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cc8:	079d      	lsls	r5, r3, #30
 8004cca:	4606      	mov	r6, r0
 8004ccc:	460c      	mov	r4, r1
 8004cce:	d507      	bpl.n	8004ce0 <__smakebuf_r+0x1c>
 8004cd0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004cd4:	6023      	str	r3, [r4, #0]
 8004cd6:	6123      	str	r3, [r4, #16]
 8004cd8:	2301      	movs	r3, #1
 8004cda:	6163      	str	r3, [r4, #20]
 8004cdc:	b003      	add	sp, #12
 8004cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ce0:	ab01      	add	r3, sp, #4
 8004ce2:	466a      	mov	r2, sp
 8004ce4:	f7ff ffc8 	bl	8004c78 <__swhatbuf_r>
 8004ce8:	9f00      	ldr	r7, [sp, #0]
 8004cea:	4605      	mov	r5, r0
 8004cec:	4639      	mov	r1, r7
 8004cee:	4630      	mov	r0, r6
 8004cf0:	f7ff fb16 	bl	8004320 <_malloc_r>
 8004cf4:	b948      	cbnz	r0, 8004d0a <__smakebuf_r+0x46>
 8004cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cfa:	059a      	lsls	r2, r3, #22
 8004cfc:	d4ee      	bmi.n	8004cdc <__smakebuf_r+0x18>
 8004cfe:	f023 0303 	bic.w	r3, r3, #3
 8004d02:	f043 0302 	orr.w	r3, r3, #2
 8004d06:	81a3      	strh	r3, [r4, #12]
 8004d08:	e7e2      	b.n	8004cd0 <__smakebuf_r+0xc>
 8004d0a:	89a3      	ldrh	r3, [r4, #12]
 8004d0c:	6020      	str	r0, [r4, #0]
 8004d0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d12:	81a3      	strh	r3, [r4, #12]
 8004d14:	9b01      	ldr	r3, [sp, #4]
 8004d16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004d1a:	b15b      	cbz	r3, 8004d34 <__smakebuf_r+0x70>
 8004d1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d20:	4630      	mov	r0, r6
 8004d22:	f000 f81d 	bl	8004d60 <_isatty_r>
 8004d26:	b128      	cbz	r0, 8004d34 <__smakebuf_r+0x70>
 8004d28:	89a3      	ldrh	r3, [r4, #12]
 8004d2a:	f023 0303 	bic.w	r3, r3, #3
 8004d2e:	f043 0301 	orr.w	r3, r3, #1
 8004d32:	81a3      	strh	r3, [r4, #12]
 8004d34:	89a3      	ldrh	r3, [r4, #12]
 8004d36:	431d      	orrs	r5, r3
 8004d38:	81a5      	strh	r5, [r4, #12]
 8004d3a:	e7cf      	b.n	8004cdc <__smakebuf_r+0x18>

08004d3c <_fstat_r>:
 8004d3c:	b538      	push	{r3, r4, r5, lr}
 8004d3e:	4d07      	ldr	r5, [pc, #28]	@ (8004d5c <_fstat_r+0x20>)
 8004d40:	2300      	movs	r3, #0
 8004d42:	4604      	mov	r4, r0
 8004d44:	4608      	mov	r0, r1
 8004d46:	4611      	mov	r1, r2
 8004d48:	602b      	str	r3, [r5, #0]
 8004d4a:	f7fc fc44 	bl	80015d6 <_fstat>
 8004d4e:	1c43      	adds	r3, r0, #1
 8004d50:	d102      	bne.n	8004d58 <_fstat_r+0x1c>
 8004d52:	682b      	ldr	r3, [r5, #0]
 8004d54:	b103      	cbz	r3, 8004d58 <_fstat_r+0x1c>
 8004d56:	6023      	str	r3, [r4, #0]
 8004d58:	bd38      	pop	{r3, r4, r5, pc}
 8004d5a:	bf00      	nop
 8004d5c:	200002cc 	.word	0x200002cc

08004d60 <_isatty_r>:
 8004d60:	b538      	push	{r3, r4, r5, lr}
 8004d62:	4d06      	ldr	r5, [pc, #24]	@ (8004d7c <_isatty_r+0x1c>)
 8004d64:	2300      	movs	r3, #0
 8004d66:	4604      	mov	r4, r0
 8004d68:	4608      	mov	r0, r1
 8004d6a:	602b      	str	r3, [r5, #0]
 8004d6c:	f7fc fc43 	bl	80015f6 <_isatty>
 8004d70:	1c43      	adds	r3, r0, #1
 8004d72:	d102      	bne.n	8004d7a <_isatty_r+0x1a>
 8004d74:	682b      	ldr	r3, [r5, #0]
 8004d76:	b103      	cbz	r3, 8004d7a <_isatty_r+0x1a>
 8004d78:	6023      	str	r3, [r4, #0]
 8004d7a:	bd38      	pop	{r3, r4, r5, pc}
 8004d7c:	200002cc 	.word	0x200002cc

08004d80 <_init>:
 8004d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d82:	bf00      	nop
 8004d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d86:	bc08      	pop	{r3}
 8004d88:	469e      	mov	lr, r3
 8004d8a:	4770      	bx	lr

08004d8c <_fini>:
 8004d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d8e:	bf00      	nop
 8004d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d92:	bc08      	pop	{r3}
 8004d94:	469e      	mov	lr, r3
 8004d96:	4770      	bx	lr
